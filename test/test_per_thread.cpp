/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2022 Inesonic, LLC.
* 
* This file is licensed under two licenses.
*
* Inesonic Commercial License, Version 1:
*   All rights reserved.  Inesonic, LLC retains all rights to this software, including the right to relicense the
*   software in source or binary formats under different terms.  Unauthorized use under the terms of this license is
*   strictly prohibited.
*
* GNU Public License, Version 2:
*   This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
*   version.
*   
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*   
*   You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
*   Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
********************************************************************************************************************//**
* \file
*
* This file implements tests of the \ref Model::PerThread class.
***********************************************************************************************************************/

#include <QtGlobal>
#include <QObject>
#include <QString>
#include <QDateTime>
#include <QList>
#include <QVector>
#include <QtTest/QtTest>

#include <limits>
#include <complex>
#include <cmath>

#include <m_per_thread.h>
#include <m_basic_functions.h>
#include <m_special_values.h>

#include "test_per_thread.h"

/* The table below was generated from the Canonical implementation of the MT19937-64 algorithm by Makoto Matsumoto and
 * Takuji Nishimura
 */
static constexpr unsigned  MT19937NumberTestValues = 1000;
static const std::uint64_t MT19937TestValues[MT19937NumberTestValues] = {
    0x667BB3F0FD8E33A7UL, 0x1320D2C460C6AAF6UL, 0x06722A48FD034D1CUL, 0x0F5D1377AEC8A586UL, 0xE14D94EDE8E65F45UL,
    0x0B2AACA2D398EBCBUL, 0xE41FCDEDCB98C508UL, 0xDB6C0C028EE365D6UL, 0x42D3A5F57169CE3CUL, 0xA67807A6307DF8D5UL,
    0x1A077FBD70BFC114UL, 0xEF913A4278E4E153UL, 0x85CDCF1A14F317C9UL, 0xCC8366840510A2A2UL, 0xF635C0CB20D3C5CBUL,
    0x219949DF63C1BE79UL, 0xC718CA298881FDDFUL, 0x4427820D67BBB82FUL, 0x232BAE39E4E3BF62UL, 0x1342A05D29A1490FUL,
    0x4F92F33EC1020405UL, 0x92437452658EE0E2UL, 0xB77D5C22FC21B71EUL, 0xC8E3CDBEC7462C38UL, 0x3A881DA8C6562EBBUL,
    0xADD58030D2A7C9EEUL, 0x0C62B287C4D7E8F0UL, 0x1B8F798F42EE237FUL, 0x71CAD39D5DA0E931UL, 0xFDA2B27D30436677UL,
    0x247C02F89542210FUL, 0x37EFF91AC8C8073CUL, 0x3B528447B13EFDF4UL, 0x953D30F8447ADD2FUL, 0x4DACD6BBF805DC04UL,
    0xE86614577C29331FUL, 0xE0264B978E6D20B5UL, 0x22A9813A9388C2F1UL, 0x910C85D52D2B312CUL, 0x7B617E4D2C53D53BUL,
    0x6DD78C92D8F5044FUL, 0xE2FFCD091F8061D1UL, 0x34EAEA76EA4CE280UL, 0x0F6C722A2EA914D4UL, 0x9EABAA4966D6F39CUL,
    0xA34BA32AC69F9B34UL, 0x21CD65B5C6093D90UL, 0xFB03551F0767C86DUL, 0x02FC6FE590CB793DUL, 0xB3EBBE9DEFD4BED3UL,
    0x8850288E3C5D46A7UL, 0x930C2BF8F53BD35BUL, 0x690C314181A060D3UL, 0xFD16EB542B6B6C87UL, 0x54082F50AD9D0C53UL,
    0xC40693837748CC29UL, 0xA6EB8B4E1AD04C8FUL, 0x79855ACD0F757E3AUL, 0x6EF2E01B1EEDA0C3UL, 0x745CEA4F0958688BUL,
    0xE36DF60D9B9D4E98UL, 0xF37259F281663250UL, 0xCE5D2A0A2EBE8E0FUL, 0x57B10B6C1C17D58CUL, 0x11E916A017E508C5UL,
    0x7296612D14E4F5A5UL, 0xCD03A2D2322FA766UL, 0xAAA81A46E6C927A6UL, 0x674BA57E9AC9B0EAUL, 0xA09200F40E26E4BEUL,
    0x3489EC7BF5D617BAUL, 0x6E495E4088845E8BUL, 0x51607BE345F629CFUL, 0x24CDEE9A9FD0281AUL, 0xB06F03E127102352UL,
    0x5747B3AFC750268CUL, 0x4B786C6E1F077629UL, 0x6212035133CE4984UL, 0x064313EFCB9D9F78UL, 0xE0BBD0520C879A30UL,
    0x723E7A5A0958AB50UL, 0x60C73A71AA3B9550UL, 0x5123477D85A348C7UL, 0xEF7153D40F163461UL, 0x0F6A85112A4FD637UL,
    0xC0CACBE6278A3AE0UL, 0x057A5FA6106B4331UL, 0x92FC200C1640D04AUL, 0xD39AEC2BF6A08662UL, 0x2971E71BDEDFD320UL,
    0x34F83FA7A5C7FE43UL, 0xF6C1FE0853271CBAUL, 0x553355DC86C727F5UL, 0xB973E17A7F751F51UL, 0x43E4F83110B832E0UL,
    0xD20F977C6DA8EC40UL, 0xD16133B1F3B6CDE4UL, 0xBF7FBB04407FE010UL, 0x8589DC9A4D94CD28UL, 0xFCAC248B6D50D3DFUL,
    0x0ABB9241A5068F17UL, 0xEC9C201DCE795B06UL, 0x150B12E986597347UL, 0x05E6C2080B46B31FUL, 0x36795996AB1436AEUL,
    0x83CEED0C71BEC864UL, 0x727F10A5DD381C3AUL, 0x6237E7B62CD68F45UL, 0xA51E60FCAFF6CAC5UL, 0x8DE3BD38661B7A45UL,
    0x797B3A020CDE222AUL, 0xA434D600FF1EFC76UL, 0x0C3C484576587964UL, 0x30DB9F79D85F42A9UL, 0x067F1BB22D00E448UL,
    0x14C746C24F69FF4EUL, 0xB45BA54DF7B04754UL, 0xE785A6052F36574CUL, 0x6007EC736094A525UL, 0xE74B49F39BABDD9AUL,
    0x584E8DDA7715C32AUL, 0x2029D41A3615D2D4UL, 0x2725B1896CAB5354UL, 0x4F2B35F74FAF988DUL, 0x7ECC0444973DBB7EUL,
    0xA01944084CE5D2A3UL, 0xCB1A22838FEB7E54UL, 0xF24BBE414536F55EUL, 0xCD914C92B9B2477CUL, 0x77CB5CFB00147D29UL,
    0x5FDCD5170AF6E34AUL, 0x6F3C91C120859BEDUL, 0xA767C9A8AF3D690FUL, 0x67FFA6ED808C5AE8UL, 0x3CBC347CDA173DB6UL,
    0x0C59760AC77CF0EFUL, 0xEB1457624E363385UL, 0xE3994AB367C47D03UL, 0x6876864FA69B86D6UL, 0x1CAE165BFE9536C6UL,
    0x07400B33F12A3ADBUL, 0x4058B0E74CB333FAUL, 0x63ABB517A7B03193UL, 0x7B5625B1001FA1E1UL, 0x51CFCC9A2941FB95UL,
    0xC149B37AE8A8D884UL, 0xF2F72F452C003198UL, 0x77C4961928F22B09UL, 0x0663802043F79BA6UL, 0xDECDC4796994437BUL,
    0x6FD6072E3AD19004UL, 0xF1EB5A6F53F71388UL, 0x9271FF04915A41CAUL, 0x839157A1D467C088UL, 0x7E25EB86332541E0UL,
    0x80A9C5ABCD090175UL, 0x46388C40F82A42EEUL, 0xF37E748E6278B349UL, 0x74F6319939E41337UL, 0x0B9D149F165F8C39UL,
    0xC7797F7A486C05ECUL, 0xCBEFA6D04921E9B3UL, 0x9B30234381A05BB4UL, 0xC19366D781396E9FUL, 0x0D913CA44DAEC128UL,
    0xD0AB5D6E046FC984UL, 0xC51E0EF37B4C4ECAUL, 0x83EE550D731BC47AUL, 0xA428D86439EE3907UL, 0x683C853033614262UL,
    0xD4FB8B79268EA444UL, 0xF19806EC8D3414C6UL, 0x367FA20FFAA74E02UL, 0xB9A9345325E4FD09UL, 0xA0F22958C32C8533UL,
    0x602E316689691FAAUL, 0x8A7CF57CED2BA5BDUL, 0x30F8D30364474185UL, 0x463D1985B7E6B767UL, 0x3927CDC75C341471UL,
    0x03C77DCADC681AFCUL, 0x26CE1C132E8F0200UL, 0x45DFBB8C77964846UL, 0x4D9839D1B163D167UL, 0xC5B98D38F0E59EE7UL,
    0x61E091FE9D8FA51EUL, 0x9E6CC2F7232F2A88UL, 0xB503D1B76D4ECC99UL, 0xBF45B61C58BBF810UL, 0x5FDF5E5F017A7BBFUL,
    0x6B265B7B683335C4UL, 0xB796DA07CA1AFB3EUL, 0x3153F75E71DFECCEUL, 0x420C6976958639A9UL, 0xB5302DE350A109F1UL,
    0x9B75A4A6395A4501UL, 0x420FA01BF543CEE1UL, 0x964EEA9433DAE222UL, 0x8F828FAE519845AEUL, 0xA3F8CEC446A60A8BUL,
    0x05ABE68C6F9E48D8UL, 0x21AB75498FBCA903UL, 0x5376D0C9BB611C4CUL, 0x67DD86844D5344F5UL, 0xC57C2AA0CF23A2F0UL,
    0xA8A9A5F6FD96EAD7UL, 0x7202FF4A0732E860UL, 0xB190430420F4179FUL, 0x4CE8C80D9B273CD0UL, 0x6F80E31790A11D50UL,
    0x6A8E41D24561499EUL, 0xD60B37379AD617FAUL, 0x4F41003FF5184FDAUL, 0x15CA108AC0AE4E23UL, 0x0D5CB6FCCB4B2BCAUL,
    0x7176C1BE1DDE8079UL, 0xF40C12CAC393C504UL, 0x666C442FBFADC9A1UL, 0x5533E907D59543DBUL, 0xE240184EFF13C518UL,
    0xF187F096ED91757EUL, 0x4CC8CD46EBB57E81UL, 0x9B030E086656C094UL, 0xE74367F3DF4225EEUL, 0xE08188AE0BE7122EUL,
    0x3003B5E0D0244BB3UL, 0xC916D8E49BB4C3E1UL, 0x64ECF8D195124FCDUL, 0xB967996723278549UL, 0xDC44BB9BA9087904UL,
    0x877752571FD4CE87UL, 0xFC8C9CE8C43462D9UL, 0x0A9D19DE9A11E6B9UL, 0x60ECE4EE56CB5496UL, 0xA67147C9224D9452UL,
    0x0DF3E0C86078CFD8UL, 0x4BF575C595AD4175UL, 0x7942D13978DF32C3UL, 0x7E22111FC8EF94F5UL, 0x5E1D874DA0D9FDCEUL,
    0x2C6F08CED49E2C0EUL, 0xFFB9AF2DE263FFF6UL, 0xD0F0A43E2F6944B8UL, 0x87D6642A8958898CUL, 0x7DF5713024AEE6B2UL,
    0x184E230D21C2CF0DUL, 0x28DBEC4C0A3CA88FUL, 0xE0706CE4E33EAA2DUL, 0x7E5CBC4D8532B35AUL, 0x02B237BFB1D6468CUL,
    0x0284BF54CBBE43C7UL, 0x1C678E527ACB7629UL, 0x7043209E69829752UL, 0x25EC9682E4324669UL, 0x553C91EE7532BE27UL,
    0xD1FE3FF8AA90CA87UL, 0x491C471FAE5D237AUL, 0xC66D465DB6511705UL, 0x5CB058D6C3CEF0F6UL, 0x6FF8DA1E62034631UL,
    0x8A47CA3E6A7F399BUL, 0x5B24EB50C635D596UL, 0xC96E55C468921753UL, 0x10F8506167066BC6UL, 0x1331B6E1ABC66C0DUL,
    0x304697807931B104UL, 0xC596B99C7047B20BUL, 0x4525A00473EE497EUL, 0x1FDC313874E50A83UL, 0xF06AD6C40972A173UL,
    0x26EA1BB42529FA46UL, 0x9D0A2D71B0EE4C5EUL, 0xA8DF9AB2E1334366UL, 0x771B0FC8065E7726UL, 0x4F09D11FAE6412DCUL,
    0x3417DFFE94641C99UL, 0xB8420736CD2C2673UL, 0xBCA13D06AF09DC09UL, 0x35234C95234D033FUL, 0xBC955401C41B9A46UL,
    0x520CFA145B1177ACUL, 0x2D01EB90FA307DC5UL, 0xD79F52C326C2E701UL, 0x21F4AEE04ADAAA03UL, 0xF15F9988678C0A76UL,
    0xEBDF69BF2D60BEF5UL, 0xBE27BA4F893CA40CUL, 0xE7420022187E046EUL, 0x13508A8CA0AE7CAAUL, 0xF5AF4D9E061F3A11UL,
    0xBE4033DC9EE2A8E1UL, 0xDBE5ADC472B82881UL, 0x5000B285E0CC6071UL, 0xD51F777E60671DB3UL, 0x0B15638633FF20B6UL,
    0x020E36CDFA9F112AUL, 0x9E22DB1FE0231BD3UL, 0xD7D1F8115886DC77UL, 0x0B0268DD9649400FUL, 0x177BCBC47AA84ABDUL,
    0x62225AD32D57A609UL, 0x13801ED464FD4459UL, 0x8B7AC13E8D7253BBUL, 0x3C89B1EE6A8F59A9UL, 0xC272A3E27FA65E8FUL,
    0x97080E4DF3571651UL, 0xFF0B879190C2E112UL, 0x0F2C2AAFF058C10CUL, 0x9F277ADEE171F36EUL, 0x979A656D81EDF71FUL,
    0x76EEAA52D9D562D1UL, 0xE74ED1FD427B8D47UL, 0x8408AB4EDA5F6C52UL, 0x28C8BD2236909D83UL, 0x3AF846C31E2070C3UL,
    0xE0B23D63A56FD89AUL, 0x377E07F49E0B8A2AUL, 0x7B0DF0A04874F178UL, 0x08289EA6581C490AUL, 0x992DAB9153A6DABEUL,
    0x2252A378B203B15DUL, 0x7FC3452D39ACBE8AUL, 0x303A6E860CC48679UL, 0x5A03742F744CBD92UL, 0x5A9858F6A946D3B4UL,
    0xC8B1E6EBF58F4F82UL, 0xBCDF8F7EA351BE90UL, 0xB2FA49AA9167C80EUL, 0xD533899B239DF308UL, 0xA57EBB47E8E43263UL,
    0x8034A3D522993892UL, 0x846E61C3048AA4D8UL, 0xCD0817302B8FF463UL, 0xE6CAE162450EB580UL, 0x61EE18EB0C1BFDA1UL,
    0x7F37DFE8C9ED802FUL, 0x51CD14960A543497UL, 0xB26DE145E1D617E0UL, 0x35D9603399273D7EUL, 0x4A6C965CBA449534UL,
    0x58CA0DC720282EB9UL, 0xD09A5C8BE6A74F8EUL, 0x3555892F6651DA39UL, 0x8EC15978DE665899UL, 0x7E17741F5499277BUL,
    0x2FFEAA557DB94A4FUL, 0xB0094914B8EC3459UL, 0x3A09A694DD94AD29UL, 0x9E26F008F64849D4UL, 0x45407AC174F824EDUL,
    0x150129DCC52516CEUL, 0x3EF81EC14A8C70BBUL, 0x97A59312851A808EUL, 0x3BD468F6B38B1F6DUL, 0x88D73D08081CC72BUL,
    0x54325752D86EF370UL, 0x789E7E986A4DB747UL, 0x34CF2727C6943B6CUL, 0xFBD9536970D5690EUL, 0x038568F87465103EUL,
    0xD0152BFEF8C94DDEUL, 0xBB9C0A2EEB47FFE5UL, 0xA8C71122C3F87868UL, 0xAAC95AB93DD8B703UL, 0x2525C873BE73C433UL,
    0xF592F5928B41EACBUL, 0xB1D7C297227291B9UL, 0xB512DA7E54567DBDUL, 0x08E38E0C81F0B059UL, 0xF1D4DE506D89A37EUL,
    0xDE9285D90D0D3E6DUL, 0x6D1EA37A4C457FE9UL, 0xB388CA5813A22E3FUL, 0x767F0785F33B2483UL, 0xB582A765BFC2AB01UL,
    0xAA4C06EBFC430134UL, 0x8F07009290F20D5CUL, 0x457248184F22F42DUL, 0x5744AB070D6F48E2UL, 0x5B5E1688061586D2UL,
    0x203DF42068285611UL, 0x495E1F7B1A32078FUL, 0xAABCDDCA37FAE082UL, 0x8665D33AC1EF7164UL, 0xA41A30FCCA3CFC55UL,
    0x6DE5380920CE4410UL, 0x30B45FEB5B37BCC3UL, 0x78F434EE479B223FUL, 0x1AE0771F2F17FC1BUL, 0xF5E79651A53CA8BCUL,
    0x2DBE40519795FAE3UL, 0x947C0478A04521E9UL, 0x212C1B6785D5B749UL, 0xEB0F47B8C9AAEED3UL, 0xD857EDB22C18D4D0UL,
    0xAD356BD43A0B5C49UL, 0x97ACEC913A4CB627UL, 0x669E0D978432AD89UL, 0x96D9C86A0F716FB7UL, 0xC6603EBCE75A53ECUL,
    0xFFC536508D996264UL, 0x3F926B58BC5DEE1EUL, 0xE032260473346063UL, 0xD3E0F378ED8FF2A2UL, 0xF3310B055617A6FEUL,
    0xEAC4CE2F82B84836UL, 0x2888C7C5ECD1AC79UL, 0x53DDF860BC4252FEUL, 0x55AC9828DF5F105BUL, 0x5D2A1BAC3F73724FUL,
    0xC9C532CDF91B76CDUL, 0x3FC341D49BCCBE4BUL, 0xF1072469A92ABB66UL, 0x95A3CAC3AC05DD3FUL, 0xE7D663A092561B9BUL,
    0x98671B827B3035BAUL, 0x0B84475F1A55AC5EUL, 0xF36EBA9CC4D796EDUL, 0xB7BE98B748718509UL, 0x3F6B9EE11DDBC41FUL,
    0x3B44EF983C81B4D5UL, 0x3C386BECAF04CDD5UL, 0x394B0B429473FECBUL, 0xD1992579C928F47EUL, 0x3E6C950359D4969AUL,
    0xE6C204D03B2ADA95UL, 0xCD68E38298B9A6ADUL, 0x2D1574F289B2595CUL, 0xF329B62A778957E6UL, 0x8A166D51FEC6D992UL,
    0xBCC22AB350282B59UL, 0xF0634E90C0107908UL, 0x0810D72D6A56FC4CUL, 0x1FEF256E69C65143UL, 0xD43798C6DCDA491BUL,
    0x49E3E85DC349FA0AUL, 0x80E43117EDB77C6AUL, 0xAA00220DF184A656UL, 0x7807E011E937DE93UL, 0xFB6CF724D8654ACEUL,
    0x0749715B81C09892UL, 0xE0D6D87FA1CF2CA3UL, 0xAC6230CE4EC8B788UL, 0xB6126808946318FEUL, 0x7D882EEDAA9DF4D7UL,
    0xF131808177ED80E3UL, 0x5F5B61F6DA4C0C3BUL, 0xCAA85513A3F746DBUL, 0x2F90F3D10CE2F9BCUL, 0xE56A174E34E4710BUL,
    0x209C1A8C45294738UL, 0xC7F0DF8A07986273UL, 0xDD3266043FD6251AUL, 0xC18D080EF96AA7E7UL, 0x25AFAD02E84D8C0EUL,
    0x178AFCEB2E2FD266UL, 0x38942E4E8C23C402UL, 0xFB7C3ECEC8FA7E14UL, 0x64F9B54F04FB29D7UL, 0x5D9D37E9BD4E0470UL,
    0xD250B4A571EB8F28UL, 0x6F78A617381BB481UL, 0xC3665CA866D35C35UL, 0x12DDC39E65EB90A0UL, 0xAB7F0DF6955569D2UL,
    0x5DDE5B1C6D9B31ABUL, 0x5A1102BB00DB2FF1UL, 0x5374383F97435A16UL, 0x50568ABDF8CB4EC7UL, 0xDE00D181D1C7AAD7UL,
    0xFFE6A491A37FF8FDUL, 0x3F5AC01547A6BBF3UL, 0xCD865906EAA52E66UL, 0xD45E39C823CCD9E7UL, 0x7961DB0E332C3DFFUL,
    0x7D5A17F61F468191UL, 0x618B1DDEEABC18FAUL, 0x8806A55E7735113CUL, 0x8FDD245E31D3AE24UL, 0xB5C4B1F032ADEE34UL,
    0xA3A46A2E1199F0A5UL, 0xFDEF610BA95843F1UL, 0xF741F5EC335C766BUL, 0x65F68CD133F31F92UL, 0x55B1EFC73440EE61UL,
    0x1C188BD528437D65UL, 0xBE16D53BA71DB0E1UL, 0x6E111C14AAF706B7UL, 0xB35A943F55E3D572UL, 0x597DAF916A0EDD2BUL,
    0x8CD9103B1EE4556DUL, 0x2FA4D1DC9EBB9666UL, 0x566F923A9F37F878UL, 0x1A592F41FA71820BUL, 0x46F8D07BFD044881UL,
    0xD2A06F53E87E01C3UL, 0x47E96F55F69E725DUL, 0x6EEA8812BD6810DEUL, 0x9AE52EF6D29E4BF7UL, 0x099D29205519A1D8UL,
    0xE84D1E30589A20B8UL, 0x3530F5F8B98E8D45UL, 0x84F77EF9AD9B617AUL, 0xB0FAEEC97F2F7F56UL, 0x49C9E6DB05A9CB25UL,
    0x57AF3CCD7FA31FCBUL, 0x956EFDDD51F161EFUL, 0x9046AB125565A115UL, 0x93406DDF3E91EA7EUL, 0x6F8E9D55F0DF4ED9UL,
    0xDB7B82360D550F3FUL, 0xA5273168E627C38CUL, 0x7745435E83A29C64UL, 0xBBEBBA51D9AE98F8UL, 0x5BC3E67F9D790783UL,
    0xE06B54D9C7329E30UL, 0x6F9D811ADACFACE3UL, 0x12CA20ADC31F46FEUL, 0xBF6627450B194265UL, 0x7F7E03B52EF55932UL,
    0x2CFE8E86FC917685UL, 0x3240488619EB1212UL, 0xF3E270A4AC5BDD44UL, 0x989411A3F06C3E22UL, 0x4E7EED56C831CE8DUL,
    0x767AA53529A4AD68UL, 0x09FA8E4F95594928UL, 0xFA4530C08BC12EADUL, 0xD5A54E407A81D5E9UL, 0xC432F6E8FCBE087AUL,
    0xF327BDC8B465E8DCUL, 0xD9CEBE5102F2E96EUL, 0x5F5C0323280FF0E1UL, 0xD6346383F146654AUL, 0x0FAB7ED024A48EC5UL,
    0xB854E4805C4729AEUL, 0xBABF74B65BB5B75AUL, 0x5FCD1A55405557FAUL, 0x0E2C40CED55D54C4UL, 0x65DA9F7900D7F6C0UL,
    0xEDADADEB56611DD7UL, 0xA86DC974B2662878UL, 0xAC06F1A7F3131946UL, 0x938DED94FE1F21EBUL, 0xA990AAA981F1C377UL,
    0xC53A06D104151AACUL, 0x06F41BB68D7E3080UL, 0xC53A62C8B8CFAC0AUL, 0xDAD27041BC8D3AC5UL, 0x37F7CFD8F69A5840UL,
    0xBC354B1E04BE5678UL, 0x48B9930B090F199EUL, 0xC2C2E1FE72518D64UL, 0x78B8890CE401447CUL, 0x2ADB78B4EF50C415UL,
    0xEF56377176A427F8UL, 0x3EDF045FDA6F68BCUL, 0xF925B554A5D4CC28UL, 0x62D35952D3E9D936UL, 0xB0F4693164CADE4FUL,
    0xACDF20E695CC2F25UL, 0x92F63B79B6F3739BUL, 0xE653F8ED9322A57CUL, 0xAC01007FC0F686D3UL, 0x8C0E9748BDEAAE47UL,
    0xA441907B374F77E5UL, 0xB8C01605911C7338UL, 0x370AC85126ACA115UL, 0x2AE2D7FF8ACDB3DBUL, 0x2FE2EF6596D05479UL,
    0x1F12D593855EF7F5UL, 0xA5EDBA23402377F1UL, 0x548A795ED1B1590BUL, 0x11B2C7461E8A2E0FUL, 0xED0D1F87098EFBFDUL,
    0x6BAC8A0346BFE4F3UL, 0x032C975DFCA350A9UL, 0x0082DEED21D180CDUL, 0xBAB181B03E685DD4UL, 0x686602AE217B0AA2UL,
    0xEA6972B75A0E487EUL, 0x29C497FFB43D49BCUL, 0xF122F2AA4B1976FBUL, 0x773E1699CC0F09EAUL, 0x419FBA67D07A2151UL,
    0x4371D4676020E4B3UL, 0x73927E188B2D4F55UL, 0xF330FCD0EFC6C428UL, 0x024F1DDB2F5C5587UL, 0x535E8A1ECFF2EA09UL,
    0xDE750195CFB04B18UL, 0xE6C2397EE4D9C945UL, 0x0B399CA6E33D239BUL, 0x261403C9F9766772UL, 0xBAF50F3E8A26296DUL,
    0x45985A69EE2501E9UL, 0xC90DFC2C5A8BAB35UL, 0xB6D4B5CDBD4091BFUL, 0xD204A41C4F5099A3UL, 0x6127985ED641A603UL,
    0x25BB24F75A45E22EUL, 0x6120DF4C6485287AUL, 0xFB038B8956F10072UL, 0xA03EF6AD82D0DFA9UL, 0x52E304DA434810C1UL,
    0x1E0D69F7E7674CCBUL, 0xDA57E111997287FCUL, 0x64221D836B94E603UL, 0x4256281C1957FF57UL, 0xC14EE4BD6A3CCFA8UL,
    0x76DA7E3ADCB0EDEEUL, 0x764FE4545B0146BEUL, 0xEBC28F36838F1072UL, 0xEFBAA038AA2E6AA5UL, 0xC615BE7629648047UL,
    0x5FD649CFC9C61F07UL, 0x78E83A4D0C745DD8UL, 0x64807C29E9F3A721UL, 0xBEE07CFC06EB5B07UL, 0xC935AF35F652E73AUL,
    0x24449F8E5CDDE7DAUL, 0xE56C2BF9FF8D651CUL, 0x8E1B5395B8725256UL, 0x43E03E1D104F6A68UL, 0xF5F644BDD1E8634DUL,
    0xC7706980D7CA7909UL, 0x1BCA7CEE4FF31799UL, 0x314F5E7036EDD83CUL, 0xC89A08BDC67BB61EUL, 0x9BE9D3801F0D6658UL,
    0xD2BAA459CE086A5AUL, 0xAEB2D99E4D51B0F9UL, 0x40BB562EDF5F41F5UL, 0x70B6D4A71BC841A5UL, 0x66EA667DD62EB3A4UL,
    0xD44F147BE0EF300DUL, 0xBD80C21878E7A9C7UL, 0x7269DC7BB694268DUL, 0xDDCA120CFB5D9773UL, 0xBB23DF468A00E4BAUL,
    0xC7EA23A4AA5E861CUL, 0xA14A86208712B10EUL, 0x4353B78E41EC744EUL, 0x84B597B5388E91DDUL, 0xE7B4EC43C5F8A089UL,
    0xF76E62FBB4799D55UL, 0xD3FCAF4C9FD2B414UL, 0xAB9536CBFCE28041UL, 0x95B053B9B9597FBAUL, 0x90BD89C1FC161910UL,
    0x33B131233EEE8886UL, 0x8EA5978B2A9AA894UL, 0x7A9B962D6B6C52DDUL, 0x0C357581242EF832UL, 0x98195FBF417F421BUL,
    0xFB1F55F53EB76CBEUL, 0xA80D772A6B6BE7BDUL, 0x7C446327D1A4B7EDUL, 0xF570B4B1F981D22CUL, 0x8FC6A2CF4B94A029UL,
    0xBBE482C9041EB0B0UL, 0x1828D3B6EEFAA7F9UL, 0xD78FF667F128315FUL, 0xDA019F3ADBA4E408UL, 0x58507DACDD6E649CUL,
    0x1A2B188A2578162CUL, 0x74CC8D8A9F34D8A6UL, 0x1F6C891675A47567UL, 0x378D2852292F1473UL, 0xEA764A936AB20AE1UL,
    0x46833BC8AE5B4EBEUL, 0xAE2333AC8F755041UL, 0x0AE0C19725A419AEUL, 0x3C71037A2B21275BUL, 0x82541ECFCE8FAA55UL,
    0x3E9289D019DA435EUL, 0x0EC9CC7EAE2B4742UL, 0xF7C5939AFDAE7AB1UL, 0xB42D4DFCA8BD1732UL, 0xCA55CC03080D86F6UL,
    0x1289E3605D633A1FUL, 0x3E67A4C76F8DB02CUL, 0xCBBA02F5F2EACB48UL, 0x9CD8A03ECE0D8D92UL, 0x50C8BB76D7A7CABAUL,
    0x37540EFBDC549810UL, 0xDCEA42A03147928CUL, 0xBD99CBBE8B1ED74BUL, 0xAE6754D092F1ED66UL, 0x405663FAFA43DD0DUL,
    0x114785592FFED640UL, 0xD0330FBED2064F7FUL, 0xC9B73CE8A2B5CA01UL, 0x4BBDDD063FE02B43UL, 0x6768FF9CB02A4A67UL,
    0xF4FAA5B676E2C24EUL, 0x1F91B4C515061F28UL, 0x0A809675A6FA56D7UL, 0xC9B8B868B1281A5AUL, 0x32C7FA9B6361E6BBUL,
    0xAB9F13540A488FD1UL, 0x1421B975ACE56B87UL, 0x5E02CC50A684BFA4UL, 0x426E29EFB1BA8929UL, 0x32A54020569B54ACUL,
    0x3F0128A6A2C64161UL, 0x56D573A862DC53EBUL, 0x22E6D2E24E86FB80UL, 0xEF656CB7B5651DA4UL, 0x237F0524527CFEE2UL,
    0x969C30BE246253A7UL, 0xDA399123D2953382UL, 0x2F73BADC04B028E8UL, 0x800B41264E81F953UL, 0xEF03EE9972EF3F9DUL,
    0xDF7BCD4D8B127C87UL, 0xB91289B50DE92CA0UL, 0x214D1C6946E58FC1UL, 0x9084032F605ACC35UL, 0x28EBBC724FE2EE2BUL,
    0x96441907478FFAA6UL, 0x1922C9250A33AB7FUL, 0x8997A1BD94134FCFUL, 0xC1328DBEB0580BEEUL, 0xA992109DC0F4D949UL,
    0x8A01456A84D3372BUL, 0x4B49454ED820B346UL, 0x5EAC75040B3B80A1UL, 0x085B45616D355654UL, 0x459DC78A42EC2FA9UL,
    0x40D26745065173D5UL, 0x9F660AAB3B5438D0UL, 0xF445214C84CCC7A6UL, 0xC15456A5E99BEAE9UL, 0x5BDEF839EBE94683UL,
    0x55F7446BCE636675UL, 0xFE188F88F2FE5F1FUL, 0xC31B89C6F652B1E4UL, 0x5D37E151F2641A18UL, 0x38CD013264164EB4UL,
    0xD7A99A2E19B2AA99UL, 0xC4C5BD89D26A4769UL, 0x7094493439D99F87UL, 0x1A39566DC35C5E0CUL, 0x97146931DAEFE89EUL,
    0x50DD2AD91D73F581UL, 0x18C61B33F581466DUL, 0x9F1A7C8870FACCE7UL, 0x44622DC96CBA6FB1UL, 0xF26FE4B6528204A1UL,
    0xEB438F03D9D59A07UL, 0x7A6947720B21D6D0UL, 0xEC866F8A435EF31DUL, 0xCDB27D8A029213C9UL, 0x6F6B97284B32EB61UL,
    0x528870C0A254A3BAUL, 0x273941C198EEC822UL, 0x73F87295DB40127CUL, 0xE96436368112972FUL, 0x0F94FB8C9D6CEB25UL,
    0x8C8932A5E0416174UL, 0x31DF5F8DBFFD0A3BUL, 0xA7A628DD15AB0D35UL, 0x656839D7A425FB58UL, 0xB5545A278C23BCE4UL,
    0xD26227FE547D79C2UL, 0x8C550B0F53C847CDUL, 0xA798EAF84C9DA4F1UL, 0xD858A013C8A4D24DUL, 0xD51F3A29EA2A5B72UL,
    0x7BD5DEAA6F3D450FUL, 0x45BC9657CFAF2A45UL, 0x7DD52BEADAC83123UL, 0xCE95904397400E3EUL, 0xCBC6D968D8498B95UL,
    0xDC6985F0C969A630UL, 0xC23445C9EE9B60A9UL, 0xE0D4B7F8E13A11B0UL, 0x245E00850C74CBC6UL, 0x2B135FCC04C02C2BUL,
    0x7F9B11DE51EED449UL, 0xAC9A61C7D706CA9AUL, 0xCBD95EE6F127CC42UL, 0x0A193E551378BA64UL, 0x4CB9962D2822D2AEUL,
    0x7D15F6C4E09D7A1FUL, 0x9002A3B8D14D10AAUL, 0x86959A902C0403E7UL, 0x15577661076475C9UL, 0xEB17A8FBEEB48D34UL,
    0xD6891654696D6BE1UL, 0x58A25204A5534E35UL, 0xDA2F9CD374FB1E5FUL, 0xAC75F4F82C4EE4AFUL, 0xC4D9118599EA6DBEUL,
    0x6AA30B0BEEFEDB85UL, 0x10E5875CD5CF2A85UL, 0xAD4928E9B24F5182UL, 0xA4EF27110094DCAAUL, 0x35E3320A88B2E3A0UL,
    0x7192967419641052UL, 0x746CE17E1D32B778UL, 0x7BE4EB8BD18F76B6UL, 0xA2E2E571002C50F5UL, 0x217E17F3C34233E8UL,
    0xD7E204FE4A11ADAFUL, 0x148B6AA3A44E0422UL, 0x6B047D2143FF835AUL, 0x17EFA0F388574E48UL, 0x79FBC8FFD9AA2136UL,
    0x4C3BE45DD4A8CCF6UL, 0x0D8833F5749A522AUL, 0xE97F67EBD2C24A05UL, 0xA49CA8920A4D2FBBUL, 0x1BCC3D0F3677E3B2UL,
    0x25C8A7322F8E531FUL, 0x80776BF62B174309UL, 0x0FCF8748C4858965UL, 0x90DBFD10BBFEA4CBUL, 0x2FF603485CAE9012UL,
    0x8D7F422350D8C908UL, 0x56ECD170F3EDE701UL, 0xE112A4920566FC72UL, 0x9C7C0C75874D4FB0UL, 0x487C2826E5B0AF15UL,
    0xDD40C7FA21763642UL, 0xE610B0696DF8FABDUL, 0xC215EBD5EE47B7AEUL, 0x251CB0D28B241E2EUL, 0x18B82434A4AA4867UL,
    0x61314F6330BBA0E7UL, 0x531DBC55655FEA13UL, 0xFE52EE7BE10928ACUL, 0x4A058839754D3E45UL, 0xB0F79A55FE1BDAB6UL,
    0xAC15B4A8B366539FUL, 0x7DF5A70E0A1D5EA2UL, 0xF32FB43CB8B3E83BUL, 0x7D7DA3D7D2E58550UL, 0x4FEEE855FFEC4E99UL,
    0x104CB650189D9D52UL, 0x59F29FDFE466CECCUL, 0x079280C4BC7EBA02UL, 0x79A2DD9ABA51C908UL, 0x47C1C535D1F21B70UL,
    0xA241A5224CB8017EUL, 0xC2860D63435E721CUL, 0x01561349D45F5B0DUL, 0xDDA482D19C096092UL, 0x8A6A38CEB5C21E3EUL,
    0x78B2BF28E564F191UL, 0x5682B9F3EA5EE854UL, 0xBF44BD99E0DC8CA6UL, 0x7984E1E6D6F5A07FUL, 0x950C82A8EAFC59EBUL,
    0xAB446D569B9AA771UL, 0x8824E5F9CC28FFDCUL, 0x36383AA731C77386UL, 0x0E473958FBCDB5AAUL, 0xA64885209FF955BDUL,
    0xAADAD5FE6323A604UL, 0xC5E3D00724DF8DF1UL, 0xA05A9322059BAB48UL, 0x82FB3CBAE07BCE17UL, 0x1DF6A10815E5E957UL,
    0x8901DB1B1EDE6ECBUL, 0xF60E500F534F08A2UL, 0x01557854A9D85623UL, 0x494F6CD93966BFB8UL, 0x010925D746F420AFUL,
    0x8FA98DA73EFAFC5EUL, 0x81F85B6391087312UL, 0xE9449472CA13189BUL, 0x415D827691B76C0AUL, 0xDC9343D2CF18975FUL,
    0x68BADD19752923A2UL, 0xB48C497E617C6C39UL, 0xFA0AD2A9164346C9UL, 0x186D67E727847B5FUL, 0x2A9160353BFDF1C6UL,
    0x10B27251C4A5607CUL, 0xF0E78B2E66DE5223UL, 0x5F7369D922197E23UL, 0xAB750C7C6C4F910DUL, 0x2A5C937577A7DC29UL,
    0x9A7C781B502F5AFAUL, 0x7549F08003E37D16UL, 0x2E710A29E150E99FUL, 0xAA4414C4BC2BAD82UL, 0xBF6A5C6E3FEB9E5EUL,
    0xAA2DF4884AC17357UL, 0x31C8BC09BC5C9526UL, 0x10EBD531BD7CC4BFUL, 0x0B3B06E79AF9F1A0UL, 0xF8A62A85575B550DUL,
    0xB4E2D2E58E96CBDBUL, 0x026B868C1E392E97UL, 0xF20651D1DFAF306AUL, 0xA54C8CFCBF7296F3UL, 0x85424B4005DC80C0UL,
    0x9E83421E79446929UL, 0xDAB640C3E3C1803EUL, 0xD9179F5A7B7BF67AUL, 0x70A1689AD94E3215UL, 0xDA51ACAE6C868353UL,
    0x1FFF94F368BFF6C5UL, 0xF6E17D7EEA88F6C6UL, 0xAB234C2FCFB8B784UL, 0xFE7859E9F9AE045AUL, 0x3EFE93494D6E3359UL,
    0x5E470AB8A011DD9CUL, 0xCBD46D6AD90B8F86UL, 0xC89DBF7EFC719674UL, 0xDD2442BF1A863DB1UL, 0x164F68E44E6EAC1EUL,
    0x1BFDE14751435950UL, 0xBAD2B0AD9E32DEC0UL, 0x9F26B40DB114F8CEUL, 0x1747D8D5DEC34609UL, 0xFE19B4F1AFD4A8F0UL,
    0x85AF723411691185UL, 0xA298EB5D57EA4901UL, 0x957C69F572CF6859UL, 0xD673CDE99066C094UL, 0x2381D2362A6E1FCCUL,
    0xA0632196FC4D3A4EUL, 0x2391B37B0E1A3841UL, 0xEC454886764850F3UL, 0x76F2AC3C8906C22FUL, 0x40BD3225DA45ECFEUL,
    0x5A7D6AE36D1BD81DUL, 0xEBE76F56A5F6A4C6UL, 0x3F4EEC9EA99A7D49UL, 0x8BD57CAE1033EB49UL, 0xBA0828611094B6CDUL,
    0x76281FE21747E255UL, 0x6BB870698D44ADDDUL, 0xAE599437CDA57F91UL, 0x2759A0A3A2E58520UL, 0x1488A0F9CD539952UL,
    0x765ACA994E85BD1DUL, 0x66440AEA34C964CDUL, 0x8F2B7EF83BB5E6BEUL, 0x0B15506B4029CD45UL, 0x43F4DE8EFD73C808UL,
    0x59686E5C21108508UL, 0x48329161E864D52DUL, 0x6E37B90BE0A7B09EUL, 0x6609D66A8EEF85B8UL, 0xA257ABEA34F2C87AUL,
    0xF259961CC5E17551UL, 0x4C867A028E2C2327UL, 0xC9A8D927540F5D2BUL, 0x1723894403A8F66AUL, 0xA9425DDA81476226UL,
    0x565C70A666DB13D6UL, 0x3B051677BF31CE52UL, 0x575F58DB98AD5692UL, 0x01AF5BEC1794EC6BUL, 0xA57AAE654DA90F35UL,
    0x0501CF59489F04E4UL, 0x6B9713154FEC43C3UL, 0x3B78D374148F0D14UL, 0x727501E8C848F4EBUL, 0x329092511323CEDEUL,
    0xDB1A5FAE1686E153UL, 0xFE046AFADE9CA994UL, 0x2D91CD08976FCDA2UL, 0xF30D8E725B445EBBUL, 0x0A4D77298C021CC5UL,
    0x7625A8F5BE07167CUL, 0x50AEABE3DD9773F1UL, 0xA3F1D7D832A4934DUL, 0xF14B3539A23B353EUL, 0x03E433F19B9FB030UL,
    0x9CE7708164FA75F5UL, 0x8E7873A0847796E7UL, 0x47CFD6B80497EE1EUL, 0xED66869FA74241D9UL, 0x5CC417DE1C9AFC97UL,
    0x41CD6E3258925CB3UL, 0x9877B70BFECD9B57UL, 0xA530DF1E47DA26B1UL, 0xF0D8B63E73BBE961UL, 0x8F7A094A04DBFF28UL,
    0xB7A017E082E533EAUL, 0xD5EF10F1EC0CD8E3UL, 0x189D58093A72D495UL, 0x4A2E7838B79A7030UL, 0xF51E2E661E895F9EUL,
    0x2E8ACD3F5F526888UL, 0xE0848919BF0CAABEUL, 0xC8DDAEB1F5501AC4UL, 0xE94851A1CB5FF29DUL, 0x098AD88FDC3F873EUL,
    0xE809E61A73BBE08FUL, 0xC9AC9EC6549C70A2UL, 0xBE323E98E6DD22F2UL, 0x4B0EC14C07C6D563UL, 0x227D5C35E9F7A81DUL
};

/* The table below was generated from the Canonical implementation of the SFMT M216091 algorithm by Makoto Matsumoto
 * and Takuji Nishimura
 */
static constexpr unsigned  MT216091NumberTestValues = 4000;
static const std::uint64_t MT216091TestValues[MT216091NumberTestValues] = {
    0x09C1983EA21C10B7, 0x652EB53B2432046F, 0x2F5F2F95A4A599C1, 0x0555B4CD816F656F, 0xA3F11D20E44406E0,
    0xA834A1E265EA6B78, 0x28968DB8B85596CD, 0xBE804CC61ECA2087, 0xB8CE79750DAA3CB0, 0x6E867B71AC2D7FBC,
    0x5301069D87DD7E4D, 0x9D617C28E7F7BDAB, 0x9BC96719355F6508, 0xCA88F96A67627606, 0x13B7917E9A6BEFFB,
    0xC25F954F2974C459, 0x77786CE66531234E, 0x9B8CDF2A1F35E291, 0x03C725ACCFA55E6E, 0x7BEA14AA119F0F86,
    0xA573A2AC1E7FA877, 0x73315CF947BEA941, 0x56391B62F6E3AC2B, 0xD28F669E56419C8E, 0xA1E799210E87A365,
    0x38E19AD099C3EF0E, 0x6D8CCD39CFAF0741, 0x7D0ECFA89C1BC687, 0x90CAE8A8E89D1935, 0x805DD83E42E0A81C,
    0xEC8462A4451A38D9, 0x9C56BF2515F741FC, 0xBBE98D20872800A8, 0x079C2176D3E695FA, 0xD0DDE2B758F5A8F1,
    0x9DA4D217731E42DE, 0x4B628864A3A788D2, 0x0ED8DDFC6C1B90FA, 0x53B1A4706CB7017F, 0x3548C6BFC29F09C5,
    0xC304C83C46CB57AB, 0xEBD6D1B0300496C9, 0x0820EB1DD5825A0E, 0xB3C2960CE70A1FC1, 0xE0A2E77DE11CDDFA,
    0xAC06BE395B5CF1B4, 0x27F06A8FA63595D0, 0x6E9CAA3933E4B4FA, 0x3C015E8639652306, 0x2B1E9B94533DE613,
    0x3465E984E579C1C3, 0x7E64516F344D04E3, 0xD9FCAC263A3B5B2E, 0x7BE6B7989FFF9BD9, 0xFD2055A8DBDAB41C,
    0xEAF86D10B3127FC7, 0xBD34A4628F4E08BF, 0x800B4EFC8FF3FEEF, 0x71A6D2175F6000E9, 0x956486BACC0B88EC,
    0x4EFB743962AD0F43, 0x76AF892F30C769AC, 0x77FAB20420B5CB20, 0x7D95610E1B0B3A46, 0x9A20AEF95AE3C217,
    0xA36915AD68E7D190, 0x6AFB5F4C7A72A1E7, 0x37AC629EC5AF6E75, 0xFCC9191512D16D4E, 0x7B7D3CBF419AD8F9,
    0x142C6AD8CF6765F2, 0xA425FAA7B3381B5E, 0xCC7F78212F109BA5, 0x6963D4B474DD3D4A, 0xD4F6E911610F3E03,
    0x34798C7ED0845785, 0x390DC2D36668F2B0, 0x9792DA797EA2CAD8, 0x916A580DF337B55D, 0xE072614DED9783A2,
    0xD22A3454F60557BE, 0xEBC0BE58BCEB3689, 0x3986551DB4F8A9B2, 0x38DDF10D48BDC537, 0x10283EA96DEB2DCD,
    0x27837470A2128AAC, 0xCA4119BE8A138434, 0xE65557861C5590DA, 0x4054CDE39C0A8A67, 0x05E4B2DC0C8DE667,
    0x70CE1CC5E6831219, 0x9F22F3402BD2A0B4, 0xBFD1799A709FCEFF, 0x9C3B26478922DB24, 0x7143F3E2373C4E13,
    0x4DB57A6A0A445E6D, 0x2EDCA54C9F0C2688, 0x865B3BA47FD6A8F9, 0x55109983EC244AC3, 0xB80C27AAEB7420F1,
    0x8F9F40BAD2ED0B67, 0x31611FF002EC62FB, 0xCF9BA37A78DBE50D, 0x9780F111559616C8, 0x829117938037BC1C,
    0x1AA69299859EDA83, 0x7BD8BD53823BF3FD, 0x91CEA5755B07D08F, 0xC12370FA9E38F195, 0xBB4FE63881F16B5A,
    0x82F335BA6CED97DD, 0x2382E9DD863A68DC, 0x432E358DE5F2839D, 0xFC7580F9F1507E9E, 0x8D3C799104548810,
    0x02C17C1D90CF9D6A, 0x185387D6D8DB3934, 0x6D1BC2EBD638B1E6, 0xB0B285C6C3C8C29E, 0x8CA1EACFA6298990,
    0xC3FBF291CA61147B, 0x3139939FDCC364BE, 0x7A338176AB73ACEF, 0x74BA7F4B27A0570B, 0x08D43D4E6E6B0FDC,
    0x068A543F46775810, 0x169FDAEE0AE74095, 0xC636BFE96F1E687A, 0x3D84D6A369D18F01, 0xFCFB1AC9B0A843AB,
    0x0D5E5A992F578AE6, 0x892BA48DD4627C0F, 0xFE6CE10045FBF63D, 0x8815BA9BA345054C, 0xF5F0174C80309E8B,
    0x5F6816A1631CE3F3, 0x3C7307C293B6399F, 0xA3F8A34ACF381AEC, 0x56C169E4FCA3D8BA, 0x9D6A10BB0B2BC731,
    0xA344AC22774F5123, 0xECB85284F29AE9B6, 0x7462323200C0D305, 0xAA9154B56A84E7AC, 0x12B7A210EDEF5BC1,
    0xF1BBDFB4F8D7610D, 0x4DCD0F0F312C82B7, 0xB487447DDD4ABBBD, 0x066248CB32E4AD9D, 0x28489C2B42247F6D,
    0x85C9B37EE0C41479, 0x39554088289F3B04, 0x954A79C180542A27, 0x2C23C6164DF92105, 0xB9A27263883EFB17,
    0x90273B07A292F94B, 0xE8917C654E3984E5, 0x7E59CA77B6AEE4DE, 0x14C3C9A4A4615D8F, 0x82ADA5443DCA6878,
    0xACC0A6F43E663D0F, 0xF473621772268EEC, 0x6B197AD0BEFF0ADA, 0xC5F13F0E9120FB8D, 0xE91E8316B97429FD,
    0xECAD68A61DD82B02, 0xA75374612F32B781, 0xEBA4B243D977FE11, 0xEE3E2BC08B4BFE2F, 0x899F6E7BC31D09BB,
    0x657DE3A4F2A46DBA, 0xF11DF7E42C5445C6, 0xA6C28DE740D34283, 0xC52AD2E6E93DA285, 0x297DAAF951FC25D2,
    0x7C7518891B7303A6, 0xF8B81C2903935933, 0x10CEDB1C33C5804C, 0xD798424886EBC380, 0x3A9507A5CE61C1DE,
    0x16F0DA2039F7C671, 0xDD3E13957A509B37, 0xBFF73BB514FBE131, 0x76C75212F8670650, 0xF181D25018FAF2FD,
    0x4B3802F60FD00454, 0x5B9B607A9E99AFB9, 0xFCEBA4B912CEBA45, 0xB9D46F4A3C777469, 0x9BF29E3B73756B46,
    0xCC9DA5D3509245C3, 0xBD2F410112BABFD9, 0x17AFBBE336EF8F40, 0x745F379FE5C86DAB, 0x83B67F3783738A13,
    0xCA5FC9EE8C9CB17C, 0x27A227F1437A859D, 0x4020B8E72B2DDC18, 0x6A7D3CDA0B265F7E, 0x3BDFD052C21CBCBD,
    0x3443E597889A9664, 0x078F562F77B23A95, 0x281C8AC378CBB309, 0x7B36484C72B6FAC8, 0x6E9DE44E1EED3D86,
    0xF5D5F7076EF219F9, 0xD772DE7CFCBE9484, 0x8F792345B0415936, 0x3F61CEC069C7FE3F, 0xDAA00CC538C41D90,
    0xA5AD3E171DB3B5DF, 0x5CE81DDF7D0C7820, 0xDC499300D64421FC, 0x76D860ADBAF1AEDF, 0xC7456420D3B36CB5,
    0x8EA405F9E0716770, 0xC95F1AC4EC6685A1, 0x29FC80F230995C4D, 0xEFD7710B9E3D12EF, 0x76088F72BAEEA3CB,
    0x6DCE586E26E7312C, 0xC0D73A49F048CD37, 0x04671C21CAEF0902, 0x5E8FB8558268DF02, 0x517B6E706FAC3F9A,
    0xAF2C7EFB8FCB3E61, 0x437C003364CCD6D8, 0x497EDA519BC89E7D, 0x331E73E344E278E9, 0xAC8DA89EEDEB1963,
    0x5639D7381C15C026, 0x6A045AC6D34CDA5D, 0xC6873A52CEABDB55, 0x97AA84A8334CB0B8, 0x60B97E8D5C8C48B6,
    0xBE725279EDD07838, 0xB107C3A01D95CBD0, 0x0C3C35B4987D3801, 0x616C7CF291D36FC9, 0x656D795444364F66,
    0xD1DE10C19032266C, 0x5673A16CA18B6FE8, 0x9703CBFC9A1CA364, 0x7DCEEBBEC39162F3, 0xD0F2949FB4B277AB,
    0x493B0E1A46342DA3, 0xFE97887084B4DEB8, 0xD01491C4551BB3CA, 0xF858CBD01FD6464C, 0x2539C3BC0C89DDFD,
    0x3FB423A7C06EA66E, 0x6C87A71187518023, 0xDAFE509AF131CDCA, 0xFAC3C261D35FA5D8, 0x624DC4A2ED043612,
    0x1BA865341B2E5493, 0x413451CC952B90FE, 0x0B790C1AD5E79986, 0xED239C0E90F70DAE, 0x452C576F630B2E31,
    0x69EA729089BA4D60, 0x3F1D5B3DAA6A1EC2, 0x895AB187609D8E3B, 0xE8E2991FC99D21DB, 0x18F6ACFEE2AD0C4C,
    0x0E606F4FEF8A79DB, 0x8206D640CF2AC2B1, 0x32FE574DFDF4206D, 0x78B64E54B822009B, 0x1C9C377E6642B38E,
    0x2C7C29500E0EE1CB, 0x7246062F4FD2E8FE, 0x14B30C770DFD84A1, 0x1209529E4710A519, 0xF2B22555B52B93D2,
    0x2D654944DB7C598D, 0x780B72339981C508, 0xFFA36E4F83F445BC, 0x2F02A50BC32DAC55, 0x4E6D4B51D2882E63,
    0x09A38BE37F4C7D0E, 0xE4FD283EFBDCF755, 0x5E705E34D7D6433C, 0x98A33220683640C4, 0xB8EA0A239770D1BF,
    0xF11B52E1E87E0278, 0x57727A737639FE28, 0x6E36B3095AA3DC24, 0xA3C603F4E7DBE2DD, 0x86AA1F34A81A8D7B,
    0x987436D883E487E9, 0x55A5DDAB6D4D8132, 0xACDC20D5AC2BA3A7, 0x0EBA83E0DE592C1F, 0x7D953144D1826109,
    0xB8543A2D5253241D, 0x3B2C1BC3F0F3E743, 0x5F1DDBC84315E44E, 0x67B5E498F4D7ADDA, 0x9827E23E0F03A6F3,
    0x135B282FA6F12C87, 0x28C84A7C11A1561F, 0x23A4D002F4287F41, 0xBD70F87E12A474D0, 0xF21245A6B1AF69AE,
    0x7CFCA26655CB4370, 0xDF1A76E135D9F351, 0xBC6124CC3F68308C, 0xD845AA714C7C5306, 0x4B11A328DDA6BC3A,
    0xC38B68815770E848, 0x981B86EC544903D5, 0xB5E996D5BBE6DAB9, 0x70CCDDED34F14BA9, 0xE0D24F1B88D7C009,
    0x5B054BE052E24203, 0x62E8F2FBF948E616, 0x94C1BB29930872A7, 0x3711E824175BE549, 0xB642781DDDFA4A47,
    0x86844D1174910590, 0xBC12CE8DCBC61E52, 0xBF13637172B25A90, 0xC6298F6A10213E35, 0x7153C5CACC08B66C,
    0x529A232D6680646F, 0x2410692D83121B01, 0x24120ECECFC9E6DD, 0xB10140B7A3E79D72, 0x9A6B8D2A50D97E59,
    0x22AE4992B5574028, 0x25B4C9F6CFC7A2F4, 0x566966C892CCC3AB, 0x5CDDDC8DEE891CA9, 0x6ED4D064617B9CF4,
    0x770A8FF04B42235F, 0x9A02D35929356DF1, 0xE5F0ACD0324F33E1, 0x374C5DC55B5ABE1F, 0x6FD1B0F4A05929B4,
    0x2302FF659E0F4FF7, 0x9A40B4DBDFD8B97D, 0x773865832A3F6A7C, 0x3554250BFDD81F3E, 0x7FC04409E389D757,
    0xF1A76BBDB8967238, 0xC62019D4A08E4184, 0xE21EDBD0AC5243F6, 0x57DFAD8953DFACCA, 0x5B01365B95C2BA46,
    0x0931685D666CC067, 0xD6DD763BBF4F2A27, 0xFD999EADA280275E, 0x51DAB76FCA45EF72, 0xA663F2C0EAAA4744,
    0x7DF8D16F33190D26, 0x0D60A0E8674A72D8, 0xB1F9F04EF6EF8466, 0x55264E10703AA26B, 0xDD5ADBD395A33B0F,
    0x2147D295542C492D, 0x55A70914E9F5B152, 0xC4A10C0C1503D201, 0xBF68572D3EC78C24, 0x1FE1E00182430C43,
    0x41ACE31A0523FF81, 0xD5AE8E27243DA77E, 0xC967AD01156CF3EF, 0xA96552441A3EA9A1, 0xC9F1023BE93FFEDF,
    0x45AEF1D62D264940, 0xFDC81829E350B37B, 0x9C66BA3EB6BE0EBA, 0x8102B864537761A3, 0x3DB1BA68B562DD0D,
    0xE890A86CEDF27321, 0x07288CAE1980CCBD, 0x679BC5E3103635FE, 0x7076861EF1352261, 0xA0536C2FFF4F5FC6,
    0x6417165FE9997114, 0x277EDBC51F7FF308, 0x210549B1041E1FDE, 0x2ECAD3E63121F7EF, 0xB5BEA07CA4656D1B,
    0x1F81C03100F28E12, 0x51F18A2EF3B9EAFF, 0xB6B69A7BAE9FF88B, 0x49FFDF7F839B8AD5, 0xF892C360ADF3F9D3,
    0x5C7C6C96970580CF, 0x33798D2DB4E4EA05, 0xEE9E92FA419A7721, 0x7D8207E392377A15, 0x50EDCEC8B323274E,
    0x35975063C4957454, 0xBDCD3A86126296D9, 0xAB7DC976AF5A79EA, 0x0C7413C1015C473E, 0x1B60031030AF7A6E,
    0x82BF88B5C2D8784B, 0xD0DD4AA72371D323, 0x6B8A75E8750998E7, 0x8EEB6CB0FDB2ED1B, 0x31793E49FA2F97E0,
    0x722114A1E9A00565, 0x7B9BBC8A6BB2CD18, 0x1DF440AB125C44DA, 0x70847DF30AB05058, 0x376F5B4B7F9278EE,
    0x3B15D2A66532C569, 0x1DCCE9CA22E3DB18, 0x697396E63609B6D9, 0x6F49DE5132BFA3B0, 0xD1B92EF01804FCCB,
    0xE212A17A63D101E2, 0x2D8A9F60E0A17905, 0xF256BEF050381466, 0xB4E1DA4B8103FE47, 0x7F875364F68EAE40,
    0x36C279FD726E935D, 0xFEBDCEDC0852FF70, 0xEF15694E3F35B19C, 0x0597FEEC4A0A44C0, 0x40D23CD059DE2CCA,
    0xC76C14030F4CC205, 0x9F71D187BD82E4A4, 0x6280F602C44E0419, 0x7ED689124A15F50A, 0x25E1A06FCF4FA228,
    0x93CD286EF22FD5ED, 0x845D73E9378A0B9C, 0xE7A778597D1EE0C3, 0xF3BFE27DA6517A55, 0xFDA8294ACD7BDF06,
    0xEB5BFB4FA60D4499, 0x9C5125A2D03C1A05, 0x17B9EAE2FE126525, 0x5C11B0D3460CF19A, 0x4E513120BFFC1A8C,
    0xC75D61E3EF31DF71, 0xA9F6C858B7A32E31, 0xB1AC69FECB9B03F1, 0x214A85EBFED34D1C, 0xFDAE1997AAD8E99F,
    0x4E6057BDEDFED6E4, 0x7D4EF833E50B09CC, 0xD57FA5E6906DEA03, 0x7DAA9D6B27A0CA05, 0xB8A33743A06D15F0,
    0xC5EDCE3D1BB8733D, 0x8ED9D4E2D6225F5E, 0x81CF6865F7804130, 0xE68E179A7EFAF9D6, 0x56F358AC270615D9,
    0x07D78DF3D4A4ECA8, 0xCDEEA581C5E96486, 0x257881B34FC19AC5, 0xD04480DC91E1963E, 0x9E4767018E6B6A92,
    0x843D09B1D1034F26, 0xA667338F4D835AFD, 0xF05F84CA5358FFBE, 0x092C9F872D81503B, 0xB40803CDD5D6DAF2,
    0x39210E25B96F62C8, 0x1D756BA87B0F3C18, 0x868C71C9E630E1C6, 0x8E7EE3308928FA29, 0x895E274686D9A42D,
    0x628049041053B62A, 0x85CD21FEAB59CAF8, 0x94588DC15AD67479, 0x8370194D0C24529E, 0x29FC5345DCD0494A,
    0x34F18BC22FC4E941, 0x36EA07E38C2CF8CA, 0xF05CB0B22AB514EE, 0x0F301819102A20A7, 0xE4CC717C87E0BF02,
    0xC137C5C66F3766FB, 0x6C8F255F2AEAECA0, 0xF2850C7C2C5E8E61, 0xDADE81111ED0789D, 0x83323452B9B0ED7C,
    0x0AB882F738C5875A, 0xBD4506F4EC2C4281, 0xCB0C1C112CC847D2, 0x8EB7F2A26A58735E, 0xF4D81ACE312FABC8,
    0xB2DCC33804848F45, 0x387FF301825EB01B, 0xCEEAB0B4CDEEDEBE, 0x071E7BB123EAFECA, 0x9B64F2DDA21102AC,
    0x17F5A662F054AFD0, 0xBB099604F9F9A826, 0x76A64A1F6DE58FA2, 0x05532316770462D4, 0x3CA372AF6853DCD5,
    0xE542D9E23FAF1C1E, 0x783314FD777859D3, 0xDD55C7037383BBAE, 0x321CBB11178E3A4B, 0xE63EF5D3DB52C2D1,
    0x1CA638227E45CE97, 0x24B78CD8A2D60371, 0x56FB3CD3080313BC, 0x286274338CEC1F3F, 0x2E2B92E670A1715F,
    0xA194FACA33E08DEE, 0xF8C71257F6E24A81, 0xCEE90FA0B40A9F80, 0xAEDDCAE856E1015F, 0x292D1C8EC177F789,
    0xC69F0E851D631EB8, 0x5B837CD452A8477B, 0x206B9AE9A3CD70B8, 0x245D076E29699083, 0x603E4D781F6BB03B,
    0xAE87D450194B9037, 0x8CDED77031844241, 0x6733AEEC531E0DEF, 0xE2FC5814407D6059, 0x9A3D125E6EFC4722,
    0x731C77E2935A8332, 0x88B9E8AD35D653B4, 0x4701525EB0ABCEDD, 0x30B5F6C6BE773D81, 0x44294F6C5F42F0FE,
    0x938C63A0769C5B00, 0x5445306E53559BB3, 0x137A18A12CD25B84, 0xE044B5DD5B12ED89, 0xEB86A910D55919C8,
    0x82E7F3C81B91EE30, 0xBB47DE7CDAF950E3, 0xE30042713A006B07, 0x9CDD062FDFF138B5, 0x818DDEC1D04C24F0,
    0x17ECEADB431E1F07, 0x7B4BA64AB2428727, 0x39D8B106AA341F32, 0x5EDB697186EF9655, 0x32888CD491163DDD,
    0xEBEA1890199CCC77, 0x78E0AEF85883C753, 0x0B7A6EBCD9B2CC34, 0xB71D5653512F2CFA, 0xCE3AA93262C10CF3,
    0x97683FC1AB618CE9, 0x8C2F80CD8A9C07FB, 0x82DA4DA3EC06A315, 0x6103F9FAD5D1AB33, 0xEDEB828B3DBA233E,
    0x90ADDEF0D8770971, 0xA9A3928D1E92F11C, 0xAB0D00D95BEDC9D0, 0x07407046AFCD9759, 0x5AC56CC009675F7D,
    0x11CEB7D8B8644E8D, 0x13B30C8113E1AFD6, 0x0EF65ABE37BDA92A, 0x6E9140B4926C6846, 0x992D8ED24D16A712,
    0x28FEE20A9289D22C, 0x8C76F1253A387D52, 0x958576FD40E96E36, 0x63EAFC55EB2252DA, 0x1696029F9107A83E,
    0x7ABFAF5A26BCFA28, 0x67381E7391B5AB5D, 0xBF8A1AB63111C927, 0xA641C9487AD1F919, 0x6A5B0B137887DDA6,
    0x6DFB50D9AEF7B155, 0x03811D0B4F1204D4, 0xF501EC591E4FDC10, 0x6E06661F3B139CF9, 0xDA2997513452DED1,
    0x63FBBEBF19E306DA, 0x01DE8E9FF07CACE3, 0xFF06106B7A48CA7E, 0x1BB99D5E261B109C, 0x22D141B11751428A,
    0x3B9EBF36B6F5975F, 0x1D735AEAA1657243, 0x971D15B105624C6B, 0x853DFD8CEA1D3380, 0x492788C729687737,
    0x172E9B8B49C04394, 0x18CB74992319BA13, 0x5A640900FDA07E8C, 0x4A5CF0BA62BA3788, 0x117B5A63647453FC,
    0x8224FCB81A19E1C1, 0xCFCA5EDDFAB4DE57, 0x4F5EC87B85280826, 0x6F45CEB695C98D6C, 0x5315F3AED7C87CE3,
    0x13E59903AE73B25F, 0x6CE092C29B64957B, 0xC6C99462A3ACB82D, 0x2A1F336ECFABDBD3, 0x8954D6EC1ABF36B2,
    0x483B2CB74CFD2641, 0xFA3D650C89376EA0, 0xFA854DBC9F201FE5, 0xF8F92790DA434B50, 0x98C5BE3111B644AE,
    0xA8704F654A677187, 0x6D8FD138EB7EF6B6, 0xBD2FF47811AE8C82, 0xFB75D128E330E2B4, 0x5560E2D2CA323CD4,
    0xEFEA618C489E431E, 0x80F3D1420E5A1C0E, 0x247B28C8F66475EC, 0xE87ED89AA98F91AF, 0xC44975A427C80B48,
    0x1EE9A4599A3887B2, 0x14D570E929DB1C5B, 0x1F958C9BB01E6F56, 0xD0D9869D09FA01A4, 0x02EA5822D718D0EB,
    0x116C60D95710BD0B, 0xB8FEFACEE76256B4, 0x11C76257502E0E71, 0xF72539C9BFCB04F8, 0x8D3B8226A8A5E825,
    0x78188C05B251A366, 0x9D35626218639D40, 0xD0694B64F32312D5, 0x3D6E8B87132564A0, 0x08F634909FE60FBB,
    0x45B5EBD876305777, 0x5252B0C0F09233DC, 0xB469162A7BD5F268, 0x3AC43B3B54953D66, 0xC44FFB15F1AEE767,
    0xDA9CE72F2A8F866B, 0xCC16152F65321203, 0xDDA446918F37C142, 0xC4024E3ECF2D386C, 0x358D233150193430,
    0x3708605558D2A67B, 0x1B89AA8869FFFFBE, 0x9A6582915179108E, 0x665CB55C1C6A4EA1, 0x5A02912558128400,
    0xFD9AF1032C3F8D44, 0x2D3E1953E4F40669, 0xEEC58B71DD61DFE8, 0xB1F3478AF2F924CB, 0xCE80A92000EFE3F8,
    0xFEDCC2BC4F222159, 0xE3647A2962EE9835, 0x6D39E83F6DADE011, 0x8EC743E1E5C1CFF0, 0xAB409A0E7942FFEB,
    0xDEE05D68CC0B25F9, 0xE83156BF1F993585, 0xDC9C697318C3CC11, 0xC7DEB3B5EE2FD37D, 0x6CEF72E7B9D393AF,
    0x6BD1EFFA725714A2, 0x51FB241D83E09CD8, 0x7BE8BA4ADB6A3E53, 0x8DC585AF4F801034, 0xDAE49C186029F6C3,
    0xDAD189F53FBFF052, 0xC9CC254C186E2AA3, 0x6306FE0BA545A8A6, 0x4E205E141CB3E2B4, 0xEF02ECA102688A54,
    0xF0AC196AE026F815, 0x3A5E53CCFCB33B07, 0x0CDBD29AD2F3B4BE, 0x4E8DC0AF1A5FB63A, 0xF833E7AE39E15C50,
    0x1B9F38D3DFF3EACC, 0x7C3A87266367031E, 0xF1F505CC9F705A8A, 0x1D4C931126DDFABE, 0x3834D9105FBE5190,
    0xB280CB61B38EC72A, 0xBBFD759BA04D5F12, 0x86EB1935EFB227D4, 0x4AE7567F8272AED2, 0x8626CF936553409C,
    0x41EA9F5E6F99AFA3, 0x10F7438A1CAB9EDC, 0x0D55134B822CE13A, 0xF743990A62A6DE19, 0x7FC48A751C56911D,
    0x762D09B39B3A2C93, 0x10F3BE91D0D65F8A, 0xC981B7A1F87B4B1D, 0x2B3DE2EA1DBC38BD, 0x905806443593CA62,
    0xEF0F20AA2EAF1B20, 0xC7E8D651DFCE535A, 0xDCC7163212D97E70, 0xD6C1ED0187CC4FCA, 0x791B025FA36E9490,
    0xDBEB8589CCA177F0, 0xD24BC15F1ED6A9D6, 0x9D47AD085170FCF6, 0xD74B666B0C2FF8D4, 0x1BD78954BB4C9F65,
    0x0EC36CEF8D9FE86D, 0x4A7211E285AA2F9E, 0x25893CEFC6C1BB7B, 0xF2C1F06266F0ED8D, 0xFA6320DD3F1610EF,
    0x36DC76A95E142E6B, 0x3A1E4202FF22389D, 0xDB936B459C517C0F, 0x9FDE25E8E88F4977, 0x259A26E4B7B6E8A4,
    0x09B118F50B562EA4, 0x888D365B790C320D, 0x85C1899C1D10E9C7, 0x5C8EF9D0E6963685, 0x063E538E261917D8,
    0xF7DCDF163F5E2EB2, 0x5E3AF2FB533BCA2E, 0x7124814204CB3565, 0xFBC681588CDC9287, 0x91E64466B658633D,
    0x9D589DA2A4BB6BAD, 0x3F783FDD327769BD, 0x6BA70FB13067BBDC, 0x81BA3FEA16F58F08, 0xEDAC1216C9A73590,
    0x76377A388B728C40, 0xACAD20C0FCC11B7A, 0x732B2CC898200185, 0xBCEA60574A6E9C85, 0x91CA51FE3DA33A67,
    0x9A19B25877577155, 0xE9CA871AED7CD941, 0x03A946234B78CA29, 0xE67E0FF8F26608A6, 0xD01726C8A6E0E735,
    0xF7BCEE6F80036F5C, 0x8DF4A7A748E46B4E, 0x51D79AA9F8DC770C, 0x7E68F67C45D88B67, 0x2638B52C05AF0F1E,
    0xDFBB883AE334E374, 0x99FFC0AF81CC4F69, 0xA28ED6B7B92939C4, 0xDC086D67E4B8A6BF, 0x6D8E1286FB761730,
    0x33271C607388141C, 0x6E3140A7C03098F0, 0x09B1546FC0D382FD, 0x1C7C7DAB9E086D39, 0x3263758271A79401,
    0x9D0EFC691004A07B, 0xD30D5EE2B28E75B5, 0x633A5D3A5EC7A0E4, 0xD99E25723FF68936, 0xBFD375922B23FB6E,
    0x1CEE658D4AB74E9A, 0x36154B0212D91CD2, 0xD20AF9D47E1563D2, 0x68DC177AF0073DBE, 0x3B819D84AA3329F9,
    0x402C90871EE9AC6F, 0xBF33680517539A79, 0xCD81C38E2F08A897, 0xB7C6272888C23148, 0xA3B0714F42896B4F,
    0x45D6325306C2912F, 0x1B22CCB7FB15F009, 0x51B7B337BD5A9A61, 0x103F7D282905C6D8, 0x8948884B043CA8AD,
    0xFAEE394981354D74, 0x9F965C44C78D1DB5, 0x1AE2A537EE24FD5B, 0xCEB621ABF0A28B01, 0x6C59F48DA0DCA94E,
    0x83564969D21895FC, 0xB31F0422C696A103, 0x01E5C1322FA919F5, 0x393C9F09042015B0, 0xB42ACBB5499EB7B9,
    0xD4F0E3A4068F990C, 0x3AD42468A75E96A4, 0xDE0E7CBCD2C21072, 0x47CBE5E929165584, 0xA83B17A54D2D0DD9,
    0xB7452415A9FCEF1E, 0x870EF2513A2D09C8, 0xF859121702BC4600, 0x0BB32547559559ED, 0x8EDF41809A70C59C,
    0xFA2D6F98A6DAFA9B, 0x7C3C8F73DD889EEF, 0x22F6D589FC06D6C1, 0x98D3A1532ABA6BB8, 0xDF5096F295DAC595,
    0x90E8920FAFC7C528, 0xB86124E63EABD571, 0x07AEB4AC8C740947, 0x196C17D9B14C2430, 0x6C847EE32F8F9F70,
    0x26357152CC44B5BC, 0xD8C3ECABD59A5ED4, 0x374C66B7556890FA, 0x55AC63009DCFA9E7, 0xB2A6DFB64E200006,
    0x610173FE680371AC, 0x16EA56ABEE04D2A8, 0xEBFE93690391FC3F, 0xFBFB37AE535D6948, 0x12382B3057945128,
    0x26BFD0E75067E34C, 0x4EF8358FA7563A73, 0x4B10662B52142165, 0xF78174CB6A1F3381, 0xF54A5FD36D0A02FE,
    0x3E8E54D647FDC37E, 0x263A9B3E0A28FA70, 0xDD60FE020C89FE09, 0x0037BE6AD3BB4541, 0x41B29AF8FE4144CF,
    0xD09E1912FC354577, 0x85C7143321793505, 0x63E1CED44C5C3ACE, 0x496610E812DC167A, 0xE256D21F8B087DDF,
    0xAFD75FA0566E927A, 0x5E76233972EE0273, 0x52239B672E381BAE, 0xB73A3B9F4AA086F7, 0x2CF45E88122ECC7B,
    0x0CC3DE87BD774976, 0x3D9E999D4C3FFD13, 0xE47ACF83C39BA5A1, 0x00DE329A5E73CC0E, 0x079A5E4044D01FB8,
    0x757B4F3F20F4693F, 0x6F4B447E790E8F31, 0x456A333BADD7BBAA, 0x67DBD2E4A03D7917, 0x876CBA5DA4CABA55,
    0xFECFDE9C089144A5, 0x64A303FD30C115D6, 0x8F7E2D577D2AEDCC, 0x9D29E92257487857, 0xA7B3F267DD496E4E,
    0x7C466DAF86E315FD, 0xC7C25066B3ACBFA1, 0xE00BF49E8D0D333D, 0x02934323AD18A262, 0x574538D84A1E55C3,
    0x852529EA370ABAC6, 0xC07E0E681A28395A, 0x6DAD4F5C9E243F92, 0x371AFA470D5C67E7, 0x5ED030C39C9375EF,
    0xB60AE33A869AD3CC, 0xCA035A75AEE54A06, 0x91C1E76261BA0400, 0x99CEFD2E6D4A7437, 0xEAE60D1BDE7C4557,
    0x9524C4E1D0AA51B7, 0x73AE51C0D67E9E42, 0x386C79F867AD230E, 0x29C0AF2BA71E8DB4, 0x2BFFFB8B454053D5,
    0xCD3077C704C3DEC2, 0x7ED328708CBEAB47, 0xF54BB338F9A0ED36, 0xCB24B4B0339BF633, 0xC4F7DDCDC0996A93,
    0x715128DDB4601841, 0xA9DCB032256DF471, 0x4788425EEDA30CC9, 0x27907A5CC710E221, 0xBE9C2B089D027DEF,
    0x7B883663BE7B63C2, 0x04C093E53E7F4BC0, 0xD7F75A18BA8B27D1, 0x2B69E6AC5447AEED, 0x03001E2ED63F1BE1,
    0x1A08CCEBB20AE048, 0x0931634A01CC16C2, 0xA1EBD8C9ACA29C1D, 0x5F61BA45C369350A, 0xF33BA9F79C121BDA,
    0x24FAA9B393AF4035, 0x4ED992C6DE5F0284, 0x6332F126346B25B6, 0x718E5E2EE6DA284F, 0x583F2910AB9B9E75,
    0x428525E4F8F4399B, 0x648135BD7759AFAC, 0xE3CE3E49BE6F18E5, 0xE739C57FE2BBB01E, 0x102F31A7FAC8A621,
    0x5EAB6A64F61D2EB9, 0x8C23442D68BFD8CE, 0xE039CBB67BBFFF56, 0x12E2D88E65D5DD3C, 0xDD5CFF79FFDEB4A0,
    0x26C81642737BA7CD, 0x67DE2BECCC39F94F, 0xB1B0075BA9211BC0, 0x7CA5844071D2D5D6, 0x0B713EA12EC984AD,
    0x831962D5AECF8277, 0xE98DABE7FECDF216, 0x8BB7C5E47E6E1F31, 0x0E3B95342DF6E889, 0x608B89682D765CC3,
    0x1F8DF807AF97961F, 0x2D63D1BE2881A200, 0xAA1357D9FAD79189, 0x3ECA1B0EAF6257C4, 0xFAE85C38087C5606,
    0xC43DD21C267C5BB4, 0xC2A3C950DB92F737, 0xA7231496E40F7F18, 0x62E4E606B7268225, 0x74A85BFABD394702,
    0x2CD589AC9166D08E, 0x3B304EBC951FCB51, 0x3D1F855718AB105F, 0x1B00B1F038664428, 0xF68DDBECE4A36343,
    0xD9A8C900E7922052, 0x0C6E070371BF82AF, 0x546B658BAA76CB60, 0x21FAC4489E718BAE, 0xDE3AEDDB098558DA,
    0xF71A59EAE874B3A5, 0x57E3F1BBBB459423, 0x6EFDC8CB763E2466, 0x3A4A5B16AC3A7906, 0xADCECE056CFD7592,
    0xE5EE687401DC640E, 0x7CC0A8A1008AB156, 0x7A0DF0068538C0D3, 0x7C170F5DB49BC462, 0x3B1879A280DBC096,
    0xBA01AF5448C470D8, 0x093493BFD921F96A, 0x3954E3DAC20CB6AC, 0x0834415ADF9E1F09, 0x3DBA325A4D50CB80,
    0xEFC5E596F6C45D30, 0x759199580EE1587D, 0xC4F676A63F8018B9, 0xC2F6003BA9D6EB9D, 0x74AEC0129BCBDCBE,
    0x944BAC182DB28DBB, 0xE0AAB347F314CAA5, 0x37431FBB111BA359, 0x2DB085894AE08497, 0x20498C4EBF8327C9,
    0x42FD185B8FF924B9, 0x8497860E80A5D380, 0x39FC751034BC869B, 0x21E929B82FB5B2C4, 0x46A0447A911EAA60,
    0x413DA94059FA2044, 0xB7630349CF79B000, 0x35D6B629B1E6DBA2, 0x5965F43929440BC5, 0xA7B52C272AC63936,
    0x4CEDB26FEBE1B599, 0xCB44FDA1D1D43D1D, 0x3825B0E93448E382, 0xC70C8E7E2219FA0D, 0xE628501893ABD2E0,
    0x71CBBBDBAFF4CC07, 0xDFE2B579B472885C, 0x632F92A6B9B8F3C8, 0x75B5423B7537B303, 0x65DA1CAF96B4BC4B,
    0xF8216C1F7634AFC3, 0xAFC654CB58635572, 0x9E31B89875D0FEAE, 0xA6C50687B93F1CA4, 0x30DB1C7CD38D5FDF,
    0xD35F9D80265DB01B, 0x2B960F8BEBA5D00F, 0x19A9A2E2A5EC3A3B, 0x9AF2FC762C2433B6, 0x7D737D0629D4153E,
    0xA57A98C1A305B46D, 0x9B91354556044AE4, 0x5A50A82B014291BC, 0x58CCC2BC37207261, 0x565323166A9ACB4F,
    0xCF6FC03DD602670C, 0x399EDFF14E2D270A, 0x2AEDAD6917093B0F, 0xD8912F3C6856F635, 0x882F971B924E8F43,
    0x4C2D900DC329CC78, 0x49DCF6262914D955, 0x362422BC93179892, 0x0E854450E1C17665, 0x7FFAD4A16CBC1579,
    0x73D8912FEE998F1F, 0xC29BEA4E7E709BC6, 0x9E1BC43743437B5A, 0x1012E2AFC577A9FA, 0xAD818F151923FCCE,
    0x7F344B3C9A1D13D9, 0x1A18C591A0864C2A, 0x1DCE3F4B1BAC8F8C, 0xFFC3A7F3D7F7C02C, 0x728187D22A88C568,
    0x7F827D10FC6EDB7D, 0x2A99AABB8788067B, 0x9946BDCBBFB6DF97, 0x18828F194EBBF06B, 0x59F15FCB71FCC637,
    0x93CB3B0EE9686309, 0xB15572F51872ED97, 0x64FDA5E5026411F0, 0x059021EA94430036, 0x6A22AB57E4EA6961,
    0x2F1DAC52276917F0, 0x9F80AE99FACB7EC9, 0xAA646F407C443910, 0x3D097C71040168DD, 0x210988B0EA8CA9B6,
    0x2B249EBFF42CAB6F, 0xDD83C90EC7B0C936, 0x7A5F94EB9FD6331E, 0xB2C22E31209F03DA, 0x37BA798683A56345,
    0x2C71C102C6837FEE, 0x09EA868EADD79EFA, 0x3135A94448D81FBB, 0xDE202B2FEFC404CE, 0x85D232B9CBE8D734,
    0xA153B79694F7DCA6, 0xC08E84143F601071, 0xAE7202533A9BA9B0, 0xF15AEC75FD35C005, 0xD2BC7DFB8BFD64C0,
    0xF0003EC97D12AF67, 0x91EF5300BC85FCC0, 0xB0DEE43ED3F1AD93, 0x7AA17FEC313949C8, 0x6A32E722DBB93508,
    0xCD96D3A2CFB4E88B, 0xA8C1548BBA08E28A, 0x1134670BE1926944, 0x41682E6AD777A311, 0xAF728B75B30B4C7B,
    0xBD3D0CB9EC5649B4, 0x3951262D63DDADD5, 0xF7C27369A7EF27DC, 0x6346F878026B462A, 0xC281BE456421BC82,
    0xBB27997D073065AE, 0xA6748E9EEC3BDA34, 0xCC442879D94381CE, 0x6905A20113250F7E, 0x446A7B985E26C88B,
    0x5934808F540537CC, 0x68FA9FA5215FDC78, 0x52EC4F0A06CDF79F, 0xAEC5C802C1BEB63E, 0x988FC65A7625EE00,
    0x177421860EB0E580, 0x03E50DBE7F0562FA, 0x00844CF3B59878E1, 0x6F42934E90D3ADDC, 0x92FB0FB1362D6D52,
    0x762A41DF41504E1A, 0xEF3E1BE27073CD81, 0xE87F7AD8A768221E, 0x82BBA8E62F599C74, 0x057533515B1D9F70,
    0x04F867A3FD11B229, 0x40F885F35E384B0C, 0x38759C7A94529011, 0x476C3752C31211A5, 0xB56CB6B9A4034860,
    0xAE1E104A01099182, 0xBD5DBC749A85032B, 0x760B853AC92AA8E5, 0x9E3475C2F0D10CAB, 0x45512A582557C5F3,
    0x1D2AD4AC1B988B76, 0x91DD87C79A7BB205, 0x3F40C29535E4952B, 0x99FF99826233D23E, 0x8B8585478F6D043C,
    0x12B13A5C45BCBFAC, 0x6A5E57F19D5E3686, 0xF0639586E9B84C3F, 0xF799FBCCC42E2985, 0x20E76CE742E6B825,
    0xE1D04662BAAAC0B0, 0xD73821A1B17771AC, 0x61ECD5C5874DF118, 0x2D750AC3DBAAB0D6, 0x3FE9FD4A38F4A5E2,
    0x47941A3DDC844F9D, 0xE6F499299A2F17CC, 0x942605722E4C4DE0, 0xDB9C185C6E5E8E62, 0x0BEC657622F81820,
    0x50985DB6C3B83679, 0xD5AC086AB1B22981, 0xD720FFE5E6440EBF, 0x82849B975524EF7B, 0x6D7D5CE323322016,
    0xAF2FD9FAD963CAF8, 0x165AC09AF1E325F0, 0x105E58E1BE20CB53, 0xBAB17442BA8D072B, 0x81C67C24BF779525,
    0x43AD6603544EFE17, 0xAE2B0FF070DF68BC, 0x41C27F6CA4FE5515, 0x97063DDA81FC4426, 0xF8AED4570C41A024,
    0xC88974DDD9C53D89, 0x3E796AD7D9B3B5DA, 0x269478162F1AD752, 0xAF0618700817ED1B, 0x8741CBDB6062D7C3,
    0xC964FBEFE47BFAE6, 0x5ABB876EA0EA1C0C, 0x128CE3B4E651AE91, 0xEFC3C3C67793D561, 0xFFA783062D956947,
    0xC31D4AB530FB8910, 0x36A3B7AC0A3FDBFA, 0x8792AA5F245C7C5F, 0xCE55127C56113836, 0xC46E5A39BD931D96,
    0x19EC323C62598F73, 0x566E55D61DF38E69, 0x95691DE43C89B4A9, 0x0D915E51DD5540D9, 0xDB6BF7973A44B736,
    0xB103BF26508CAA11, 0x517AF46CF414541B, 0x20C71B6AA98E4502, 0x0944871FC848DABA, 0x8FAF45201B9A6A63,
    0xD76A0F8CA8959C24, 0x12345960B776EAC0, 0x0AC14EC5F1A69400, 0xE1D561C92EC62DB5, 0x03439081A45DFB02,
    0x1364164490A455D4, 0xBF06AA50CDCFBDB1, 0x29D5B7F4E1CCA3C7, 0xD278C506246C31AF, 0x86CDBC266EF48B6A,
    0x287537DCEFBE764C, 0x6DD920397BD34EAA, 0x41A161F91C2564FF, 0xAB8B4F5707EEF520, 0xDBFC3EF0BEDBD954,
    0x0DC305969CC11E87, 0xEEF799383201D0B5, 0x14991BFFF0506F5F, 0xE2A3268730FC4DFF, 0x2758C207740B04EE,
    0xB3614FC69B544DA6, 0xD74A0C383422EEBB, 0x5BD4499236099F0E, 0xE64C36B61E8F2004, 0xE9409F7627621486,
    0x30AEE7BD6537532D, 0x3BBA32FA0C13AC1E, 0x458BBFDB83D2C476, 0xA9973B9D28624D8F, 0xD31F47A6D992F85E,
    0xAF62F22A185BE2CB, 0x0A246F4EEE64D4ED, 0x4782818D15575083, 0xFCE802A0208A54D6, 0x28E11F3FEACCB3C0,
    0xC92582DA04D87981, 0x6904D644B1E0B160, 0xD691013AB3490B4F, 0x932F8A94580C3E38, 0xF29377C9F84A651F,
    0x437C4D6CE4B0A23B, 0x748F1082B16DBB3A, 0x8D5E726BD2F37517, 0xD429EEE2252CE4E1, 0x15DCA6FAB8404B80,
    0xA6FBB8B0410A979A, 0xD22535626D50162F, 0x849851789A8ED4C0, 0x97873D187124AB75, 0x39B2978FFACE8201,
    0x7E1D33F71FC26F94, 0x63A9E0A4D9674B0E, 0x0BAA27AD700DB17A, 0xF29FFAC9C07714A0, 0x63F61197FAF778DA,
    0xDB816BC6969930AC, 0x3623AC8556C6546E, 0x48E773043A827E97, 0x1164ABC2F898B346, 0xC86A5C9E09B5958C,
    0x8F4AF0BB9C3D2573, 0xCC934203F566313B, 0x22EB747DD00FD162, 0x89E56AC5E45B9434, 0xCFCAD0BC94AC43BF,
    0xFF251716A2EF15A7, 0x7EEFD56380598FE8, 0xF6501E2433687F28, 0x3F77F06D630D5FB4, 0xD3DFC79EAE1B1063,
    0x416B4F5AD799E62D, 0x5D169BA2213A433B, 0x0E9C926A08BBEA2D, 0xE6D1001C0040DBDE, 0xE747DEDAA77975BA,
    0xA1C85BE04D318718, 0xAB7AFE74DF035947, 0x1EEF912B14A5A9DC, 0x5E8B28E01AC55CF6, 0xF3F294A84D7510D8,
    0x3758701F4849C7A2, 0x110335B0986CF77D, 0x99051DD89434DA75, 0x056577A33203AC71, 0xF5542CDC0E47075C,
    0x542B87FEAA84973F, 0x3F8F5D7195361D64, 0x728D0BC58ACCAC69, 0xF151023C058340E3, 0x839B8924EA28264B,
    0x6EC64F117721B940, 0xBCBED5FD912C6BA2, 0xA0E60266B27EB507, 0x6A5CB54F4EDFDF06, 0xC456185A2DD4811B,
    0x19CB01E4B85A040A, 0xA246BC19526DF898, 0x0BBDED6A49C70BF5, 0x4C993E64779DA106, 0xDFE00DBF0358398A,
    0x87527A8B4879309C, 0x8F990D33785837F7, 0x7A5D61147A502294, 0x66103FFA691DE509, 0x547549899469B5AE,
    0x5CFF8D56291DB1FE, 0x44633C3C8FD0A0BF, 0x8990BCEAB29429ED, 0xC0620E5A04301243, 0x466DC7A77951C7C3,
    0x133E88FF0872BC36, 0xA5CDD5EA2E5AF869, 0x96E74118B63F0D9C, 0x986EA7CCFB547496, 0xCBCB3239475A2593,
    0xE076A7E4689520D6, 0xBD30DB5F2C2279AB, 0xE8F1954E2AF971B2, 0xD40EE360EF5F239A, 0xF71DB434DBDD33D1,
    0x371A7E74AA2EF174, 0x6E2FF0FBE7CC41F7, 0xDD1391A0A3017A36, 0x55003BFF1849EDAC, 0xCD0A55023C69954E,
    0x79B3A67AF7D60282, 0x2045B4461067E3C3, 0x8EA69BA2FEB33CAD, 0x4A10AB5273552091, 0x873FD58EF39D9403,
    0x74F22829DB7D9BC9, 0x9F79FEAD0FF1BD21, 0xEA3EC0370AAB5A51, 0x2625922D3BA21B0F, 0x099565ADD86B098D,
    0xE4AB22E113CAE5F4, 0x6C30BA4B43EF4EA4, 0x81F0D388CCF7747A, 0xC3389E9DD8099C2E, 0x7834D568C01FE90B,
    0x8B355A6902DA0F74, 0x0AF532640C2CD82F, 0xD50BD4F791CE95CC, 0xBED14FD43EFAAF72, 0xA20EB0154435657C,
    0xD74868D3CBA5FE48, 0x46667B4688883886, 0x9D8BF321DBADB0D4, 0xBA08D9AB0A32137C, 0x04FA001749C5B941,
    0xE1F7AA13D8DE82AA, 0xDA1EDFDB7EB00496, 0x9A5599310D3930E0, 0xF59F22C3263BB018, 0x4339F51EEF184A8B,
    0x40F13A557BA84784, 0x8745F2C5D04BBCB3, 0xD7DD6E01A60790A6, 0xFA79718CD8277052, 0x13E0C3D1B49ECCE2,
    0x67EC222CDF68F65B, 0xF6D8F6BD248ED5A1, 0xAF232A09F7A2A3D3, 0x771ACF11951CA7F3, 0x9649AF1D73405947,
    0xCC45FA5CCCC3AF51, 0x00ABC6CA7A35714A, 0x0D214BBBBE90DF61, 0xE8F715676335FB27, 0x6D388E04ED2AF173,
    0x715FC081BF254350, 0x5804659F9A5C8982, 0x1C94A35017280903, 0x546A20783FDA123B, 0x26F0796259A894EC,
    0x0C0D88F4D3B92938, 0xDC02B9E5E596BE30, 0x1195F94150352DA4, 0x1D6DCD86E2C1DA9C, 0xFD53D25BD0D6658A,
    0x1B3BD6003875FD8F, 0xFD094259C4925D37, 0xA0F218CDDEA2D76C, 0x6D6DF7B8878E5010, 0x21A70A550BF91A88,
    0x9F9F49133F40F851, 0x328213ECD8EB28C2, 0x5A1ADE0FDD00BC14, 0xB60A0CE71BA967C2, 0x83ABE01BF97D6771,
    0x72780225E5E6E985, 0xB18B223994495772, 0x45CADF046E2CACC9, 0x8EBEE4B33CCACA31, 0x7863A90A95CC0D1D,
    0x84575ACD6D6F5CC5, 0x24AE9F5A395471D9, 0x87E4755C4E8ACDF6, 0x28971D8209865F34, 0xD37A1E7B84CFE14B,
    0x1077EAB564BF159B, 0x708FADAF9CA4E80B, 0x2DEB60EBFE416B98, 0xF5710512B1E4D4F1, 0x741FF25B5B3A82CD,
    0xB54C1F35DD0D2922, 0x0DAB978658DB46FE, 0x0636708FC4038012, 0xF55DCD234CEE466A, 0xBA229DCE7137FFFE,
    0x1EE044CD5630CA85, 0xDD4E5B50D9145216, 0x4004DD7762FF4EB8, 0xA19D80BA7F1C9912, 0xD64359633D261CB9,
    0xD9CED8A3EE012B7E, 0x5862FAFC793F99AF, 0x455FC738FA8FCCB4, 0xC85EC31269A27BEB, 0xA67D8D4960E91229,
    0x583F868A0474B7FE, 0x01A2EF6FFD6D4007, 0x01CDACD76F5C4EA2, 0x83CF2EB7BD3FECBB, 0x3EF3A817E1B049A3,
    0xD6DECDFE91DF5CE0, 0xC0702760F48BD99C, 0x35CAECFEFB89A5C1, 0x3C01F2CAB88F11EE, 0x5480335E6C24DF49,
    0x472B22A3F81CB3C6, 0x740AE80E0F5967E9, 0x321E6EF7A10B4A3E, 0xE1CB000D3D312802, 0x98DD23C0759D0361,
    0x35A52CEC5A5AE7BF, 0x9033A17BF55B68A8, 0xAC210FDC8F49B37C, 0x5840BFACD78E060C, 0xD6691FC0EC6CC878,
    0xDA7A6D7E821E3601, 0xC2CB744E071D1DED, 0x5F14651786EFDEF1, 0xF8C82AFC94B51F2C, 0x09F16441DB3E361F,
    0x5B35560861EDDAA5, 0xDD89798F41155513, 0x17F14AE9F8C37E26, 0x1F4A355DBCFAA034, 0x9DD3B2C504B2AFFE,
    0x0F57648D0A4F355C, 0xD00612C14E0CCBF7, 0x16AFD38A9E6F7D35, 0xE926B4995B07CC3E, 0x02EB8587D45BE08F,
    0x173247B4641AFE6D, 0xF1ECC369E7E544F3, 0x419495EBF9F4AB30, 0x23599AB9E5A483BD, 0x21C9010851498E43,
    0x4BE30A172C5F4CAC, 0xA475CF1253921C6B, 0xAA67B806137DF166, 0x46F3BBC0D2A44DCE, 0x91A67E3B67BD2DDD,
    0xDEE917DCEDCBC721, 0xEB27361C70A1F866, 0x0A85B1EDFE7107E2, 0x0BF033A8F87E7D7E, 0xE8B2CD938BE893B0,
    0x1169F44E8F6BBC28, 0x93348B8FD4E45964, 0xB4A2D060DA27E66C, 0xD8372B96F873D28C, 0x607E512894153983,
    0x11370D31206B0917, 0x48E01788FA150DFF, 0xC8A0D8E6C8309609, 0xD3B637BB89DD9B87, 0xCD6D0A62F17B61CC,
    0x7C33E25F3E8C7310, 0x35F94FE24DB32467, 0x28853F0C350A826A, 0x6DC7C20F18EF7E98, 0xE626D8D0A1238B0A,
    0xB7FABB19F72C637B, 0xEC183EFED0EB825C, 0x45A5BA93C0D13E75, 0x259D27A93BF379E9, 0xF5BF0524D906274E,
    0x52EB3A3EB89E114F, 0x8D01C26D9E3D4BAB, 0x4E36EF83FE8145C5, 0x1D9EDF464CDD851F, 0x7A6D378C23C9819D,
    0x30514095FF49DEF5, 0x9D8ABEB9D7CCA0A0, 0xFCA4FC851A6B815A, 0x83FDF72807480B50, 0xED115F07E552ACC9,
    0xE22D9C7363679696, 0x7956B62BAC5D8B8F, 0xA8EB3FD599DC1B17, 0xE8CB12CC07FD1B4A, 0x85155460A58DABDC,
    0x78EBA635A5364BA5, 0x1F3F48F93EDD7C65, 0xB0CA5EE3B20541D9, 0x30B13716ABCAF016, 0xB8A3A442DE0B7A49,
    0x2FBE63819B4B9A87, 0x11D96BD618267E71, 0xFC4E975088583644, 0xD2EA9D1DDE1E3899, 0xF88DDB4B19195A8D,
    0xD0DF55B0935280F0, 0x81A6D1A8FB899B5B, 0x0C2A154C636FB0F8, 0xDC8C4E2F69BF401A, 0xEF64B4127C8BD39E,
    0x1EA9C6B8E67EE2C6, 0x07D77DFE011514DE, 0xC8B7A22F19935935, 0x2020B97F5DEDD4F3, 0xC725177BC8B71C12,
    0x34093510275DCCC6, 0xBE3AFC16CE8C43CE, 0x609D60D976F52D98, 0x2B5D2D982FE41FBB, 0x0237257BA993815F,
    0x013E0C85690908E5, 0x71FE5A9054DB8FCA, 0x76BD27F7396D850E, 0x8DD2500EDAA7B9B5, 0x7420BEC6D504A17A,
    0x67A44740E147EC65, 0xADE5F9ACAB8619EC, 0x1D2ACF755CD8FBFA, 0x6A4FDA545A6CFCE8, 0x82F3B6A69C7826CD,
    0x4DF531C9DD0A8D65, 0xCF43075890750E12, 0x2B2D6639BD0815CC, 0xF41D618915CBAF87, 0x1F9482584D524306,
    0xD80418ECFAF23167, 0x94006B7DAB08D022, 0xAA0E391297262628, 0x76E81726910BF8BD, 0xA5164782F084F3DA,
    0xC0AACAD7F4ED9E14, 0x35B474B1B7FA1F82, 0x4008AEACBA2BAF15, 0x064F2D819E1BBE47, 0xB521A93AC6B42EC0,
    0xE8F7B03AF6C50892, 0x271E12F13D488DE4, 0x686596F0A4A9CE77, 0xEF5BC78C99D5CB05, 0xB791A21A65A1C020,
    0xA5A6CB1925B0A62E, 0x84E046226CF29C69, 0xEC7C5CA3D1DD0B82, 0x61E9FB520C6E72DA, 0x3E7655692BBE3B26,
    0xD8020C5AF06813DD, 0xC695D489734E90B1, 0xD1EDBECDE7BC6F59, 0x3073B64B0E66C9DD, 0x101039ED4586E5E3,
    0x8C8C2F9BB3DB389B, 0x98FCE015BD89F1A2, 0x60C95C5D00C63340, 0x32C650A3FD0CA630, 0xB5D7478239C480B3,
    0xD92B0418526879DC, 0x03FB748C4F428BC6, 0xF095F39D0344BA99, 0x43E144E853641670, 0x07B453A96A9D78D7,
    0xD9420D2D5C25A87D, 0x74371B7A073EB61A, 0x6E29F50B9472F9F1, 0xFDC2E38D819489E6, 0x7F7611FA55E172FD,
    0x2FE4CD0B84491897, 0xF40F5ABDBBCE4DA4, 0xBAB100BDD6CEDD29, 0x18D25F99EF44A18F, 0xD4E6DA65C39FEA5D,
    0x4B29EAE1F7FEEB19, 0x8E593B72446338BE, 0xCF7A8E73A32BDEC7, 0x9B14F1EA5E40E9BB, 0x970B8C498F7D450E,
    0x01B6B62673E2EFD1, 0xA6F54064FF554E1C, 0x92FF383988D88290, 0xCB2D7128F1FBBBF2, 0xC9597483D198E7CB,
    0xB3971B3CBFD0CD82, 0xA38F5DE845901D93, 0x7EF6D517BDC3B0C0, 0x2A3A25F44403E4A1, 0x5FE7FA78D10A7774,
    0x1D3A071E658B19BF, 0x7A6320F6B95D8CDF, 0x90E2098D31DE042E, 0x04D61AAF5AE78BFD, 0xE0990F2FEE5F10E7,
    0x4A7D1FAA285F268C, 0xF19A5780275B7F0E, 0x2CB401E71C382633, 0xD47801AA9CC91A7A, 0x5B6F405288F40567,
    0x735FA13CB6C435C0, 0xF73A09206A3CC3B2, 0xF42568E32C268FE8, 0x1D8A455E89EA6B6C, 0xAC9E58A11C536991,
    0x00652B5F8AE1E296, 0x8A05B5F2C50CE188, 0xCD7B046D4E82DFD4, 0xAB35725E00021B61, 0xF661B78D2216DEF9,
    0xB192C5AB2523F9A2, 0x4872DE2B6BF711AA, 0xE9C7BFC1589C53C8, 0x39870060E7AA0F63, 0x3B01EE0E1FAE54F2,
    0xDC3F5CFBA8C14C63, 0x4BCAAFF3E00FD300, 0x2DA1217CE66C29ED, 0xABD6044EC3654EE0, 0xCCD75BC921FB6AA4,
    0x69A46942DD44328F, 0xE028F88D28087A35, 0x2FF8E7E97EBF0B69, 0xAB4F526404D9D158, 0x9C4E7BA25A9C158B,
    0x95D2015F8BB9DA0F, 0xA36FC438A2CEDC07, 0x65FDA66A3F1F0E70, 0x981C074A4B8FDD32, 0x84FF8B094DF4FEF6,
    0x220F2033255AA215, 0xAF9DA7384B6C74BC, 0x5627D7D0F482D055, 0x9FACB90245C7BAD2, 0x82558A53EFEF9D00,
    0xE9213B788C385154, 0x82E1A8AD85D685DC, 0xA85243F286E1A958, 0x6E3CE4430CA07695, 0xABE512DE13C970C7,
    0x921274C2BE06E6EC, 0xE33027F1D217045F, 0x86CAA48DC4F88FDC, 0x60AD6AB31687555B, 0xB6C8C4211818D539,
    0x4E85718EE8ADED01, 0x55436006F245F054, 0x138FEBA7E8108E40, 0x97E23964F8DFFB7C, 0x268E22C5261199F8,
    0x5D9E8219DF3BAE1F, 0x87ABAC7B7BFA0AD8, 0xBB546B988EC53D48, 0xBE7BAFEC2C1D61A7, 0xD7CD13E8DD7D161A,
    0x86D8E7118424844B, 0x2413B2D5455AEF0C, 0xE92FDB56D4FF0506, 0xF7756617F61E5057, 0x5A4092A70C0E1CEA,
    0x76380991A8D3F151, 0x4D5FFC97C1DD8B17, 0x1395A5840FBB2212, 0x379BEDF84E6FEAA9, 0x5A580760820147D5,
    0xEE7B2941B175D0A9, 0x34F85279CF1F1D74, 0xD5BA5F33D721B7E1, 0xA1CC0634197AB616, 0x3294A981ABF2F74E,
    0xEB87BDB3B48EE815, 0x81F31C7DF9DB7F0A, 0x37A51087CCFE6CBB, 0xE4C7A53B47137BA5, 0x3017246722BAF751,
    0xF92103F61FA3A364, 0xD640CE170D2FA26A, 0x7046A211F882CB59, 0xF30F25D58015A92D, 0x7E13AFC4D20F3407,
    0xEC9D5731EEDDB8FD, 0x1A9ACC60C91A6645, 0xD24896F81669C0C7, 0x902B26AF556F1406, 0x786BB590002A424E,
    0x30785E1D91659EA0, 0x98078FAEBF87BBB9, 0x117A4DDBCB7B2669, 0xE4DF5DAA606F5464, 0x9E235A39923F76DE,
    0x183DFA5CEFA60DC7, 0x38A21B83B5734CE1, 0xB3FB316E4E8FE74F, 0xDD599BD903EC33A2, 0x3F78F56E936D36C4,
    0x3F9CEC766BEB3061, 0x354D003CB93E40C5, 0x5CF602F81FC06637, 0x33652BBFBDB1BBF6, 0xDBE0A5FD700564EE,
    0x26629EDDECB2A1D6, 0x50E5F8D3311CDB24, 0x085C6D886CF9F541, 0xC208F70C988924AA, 0xA48C3FF05C747D5A,
    0xF8D5E2DF3B7E10CE, 0xBC2E0CC65E2FB0AC, 0xACB0F90536D5C967, 0xF3EDA3C06265C091, 0x850EDA4B2C997DDF,
    0xE740D5A55668BAC7, 0x4B4CDB087647EF06, 0xC0741A4B1E09C7CB, 0xE0BE35CC545676F8, 0x18D3F83DE713332A,
    0x937587980E250BFD, 0xF654FFC32096B0C4, 0xF264C85B65196CE9, 0xEF86BFAEA72598B3, 0x6DAA741B079C27E8,
    0xDCB2C97FA5826FC5, 0x6F2F4CC987D6C7CD, 0xC022BBA5B97D65A2, 0x47EAF54395CE8150, 0x51EC774A7771D3F7,
    0xF30C32252EB1EF9D, 0xCBC771EF0E171895, 0xDA6D659F2804076D, 0x21BE13F093F88B1D, 0x78380C9C8F6CE29A,
    0xCB073E1F94040037, 0x90E8C9E56843EE0C, 0xAC54C7D30C61365D, 0xA38413D306ABB224, 0xE29B48D8BBC5A3E7,
    0x40AE17E4E3C1BB36, 0xACBF9F5BE7473698, 0xE46056A372958C9C, 0xDF486710D3DFDA3F, 0x48B403A58CC1EE6D,
    0x3BF9A1230686CDE7, 0xF99342E0619ECE18, 0x7129939F7C7926EB, 0x18328581E2CBB43E, 0xE4D3FC4A7FAFB50D,
    0x02115F6A04D9D340, 0xAA17110B2FF1A27E, 0xAF48CC0DFB3748A2, 0x49B8C19EB7CBD6C0, 0x50AE22662EF8D5D0,
    0xD9F8A2C7FE5C3F84, 0x9803F1CD1395C3AB, 0xF981008A448C21CD, 0xC95E4D5B5713D1E8, 0x6F3CEB754E7BB2ED,
    0x311570A405013112, 0xFF62052D4371463C, 0xFA3AA71C15DCCDDA, 0xDC3087DECE0078A3, 0x4DA1E468CA91754E,
    0xE20483A41846A10F, 0x0321E6DED8F48508, 0x91556205A888E890, 0x9ADFB5C67658F65C, 0xF8B1FDD3DF4E5FA7,
    0x110D9287619BB8DC, 0x8D4C7943D7A18F66, 0xD3E42FAC39C299A3, 0x48972FA0FBF7BF3D, 0x967DF33A27ED6F1A,
    0x9CB3AE8548B40E39, 0x3494B7130E13ABFD, 0xECA30FD8AADACD41, 0x2B276FC56E8130E9, 0x807A5447EFCD8AF6,
    0x1D98FB7681919688, 0x762B6842EA2D766E, 0x2751E7F5B86EB93C, 0xF078F0D47FEF8C18, 0xE31370A23C258106,
    0xE894828F7D2A607E, 0x428851DD7AC50108, 0x5D7A5CD2FEC7638F, 0xA5A986C6D46F9CFE, 0x7392C3AE6A32884F,
    0x6253A23FC6784CA1, 0x129277DE6A327E9C, 0x1E8F1A22DDC9B5F5, 0xF3CFB8204E506D66, 0x44331CD9E18E88C4,
    0x9EA6AFB83D48DD9C, 0xC359CAB1FB976BF6, 0xE500AADE17B0B1F5, 0x19C35778EBBE0A19, 0x6225DF44B1EAD67B,
    0xA567378D8EE8599A, 0xBC2AAE66A3D3C60A, 0xAF5F0D6B6D5843CB, 0x66A4DEBAAC309168, 0xEFB4DA4B8A046068,
    0xD69372554EC78B39, 0x85E73C9687BF5D25, 0x5369806274BEBB28, 0x3367FEE2138A4603, 0x5CDA0B886441185B,
    0x43982D27B52DE87A, 0x21090E0EA90E5FB1, 0xDD1ABD8D35407E6E, 0x6AD522CAE49D4232, 0x14000CA3C8A65A7A,
    0xB74051E248AEF4FC, 0xCF7EF43EA43FAB53, 0xA35CF49F7B2CB078, 0xC3382B75208D55E0, 0x3270624113CBBDD9,
    0x65FD86147D1E4056, 0x27D402B46BEB9178, 0x6F3D4F77D0737F27, 0x222EF6166C11DF03, 0x4EA72841D5B0BD80,
    0xCE833DCDBB5F423E, 0x26C2F07C6585F67D, 0x03E779CDB8A6836C, 0x5BB91CB20A1E6BBF, 0xDFA7991649C4C644,
    0x11978FCEE862C01A, 0x9009FB21D89B16AF, 0x03B5F99B897124AE, 0x7F7A500CAC63384B, 0x1522702E0444099B,
    0x543CF9125FBF1CD7, 0x66A4217CCAA50783, 0x02DB37DC0C0DA5DD, 0x045CEB043AE04381, 0x0897302ECD80F76E,
    0x69738CF0B32A6452, 0x50A96AD034641A21, 0xB297F0933735AB6C, 0x81B2C7456BDBA289, 0x09C0E5BD94F3C207,
    0xB8D9CC669712F208, 0xF0826A931D320721, 0x32C1035259BF1310, 0x7E19D019A483F2DF, 0x463AEE98E1DB620B,
    0xDD0FC115A42E991D, 0xC8FAB6AF794ECA2D, 0x12590110A271D030, 0xB863B552A614A9D5, 0x9BC38FA55D1CA888,
    0x78D98C8862CE0B33, 0x55E2F6879523993F, 0x25707AF778DE2CA5, 0xE3F2B8AEA0B6DF3A, 0xE9D860E2B921576F,
    0x533C8D6F83F62544, 0x5E3111C53691B00B, 0x666CF88F99F94D8A, 0x753A837EC8EDD839, 0xAE3EAEDE2482BD2C,
    0x912C55B70A1D30E1, 0x6CF456985507DC25, 0x25AA0C42A8A88E9E, 0x168FB643244DABE1, 0x37D159DCC2E09BAD,
    0xAD194F6D14A81635, 0x42BC70E8091205B0, 0x359585901EB896C4, 0x69C988B63F58B1C9, 0xDF1BD7126901FE0E,
    0x4A3D4E0C00DDD035, 0x1D3204C276E0AF73, 0x8278FF25F9111D90, 0xA38F0D634CB424DE, 0x42A4DDC5F49F028D,
    0x33FFF91500018BB1, 0x7C08F7C1A861E065, 0x475F4CF11EE8F4F0, 0x357C9F98EBF0CB19, 0xE6D25444412EB9ED,
    0x90ABEC565B449D63, 0x4DCE3CDEE3E50131, 0x84BDBB667F1F85C5, 0x546804A2B53E2E95, 0x600F8CA5BCEC2ED6,
    0x11639474BBDF39D0, 0xF78A7347A767E2C2, 0x0A07A8F45D537F84, 0x5CD5EAAA49D0E3A7, 0xC3B2F152C24604C6,
    0xBBF4DEA4EE7C6CFE, 0x57DC3F3B5386C7D7, 0x89F8DFA9D462F6AD, 0x5AFD6D1C171C7904, 0x2060EB74D445AB9C,
    0x1C3F3CBA3E7491CB, 0xE0E92B374562BED0, 0xAA3CD442F91B8990, 0xD8D5E028101020A9, 0xB10A5369BEF5352B,
    0x0A9AB5B7BC3BCC66, 0xBB64ED943041C22A, 0xEB9FB1A3F488C5AD, 0x8653A187908AD293, 0xCD9B11756F5049A0,
    0x634A44CA97342FDF, 0x777D6DDA9F960BFE, 0x1D7BB9C39964992D, 0x8097506498930809, 0x19D0F18ACEE6D747,
    0xDFF419AF8FA17DDA, 0x60213A192987F3E2, 0xE52F2EDEF470A7AE, 0x555A1D188E70193B, 0x7ACB76F57F21B5F2,
    0x711E7192D9C036D4, 0x2280137DEFB2CAE3, 0x19BB552711055E1D, 0xBEA4CF78C38697BA, 0x46E24AC9282C4368,
    0xD1A8474F4088617C, 0xEC394014D6258EF7, 0xF7DB1AA8A9F5CB54, 0x1E968C9496E4B1CA, 0x81E76CA9311804B0,
    0x1A67861C27F6C95C, 0x632B2C71367E071E, 0x317537D4A8D3BE11, 0x20DC642B10C8C112, 0x057A0944337E61CB,
    0x4B8AB827A13A4893, 0x38593967D8D4D06B, 0x0786C74D093531FD, 0xFA95445BB3C47DF7, 0x310EFA06AD086D30,
    0x528384DD50C3E9BE, 0xED2D5F2C4E65762F, 0x996C5414E8711310, 0x81ECDE834472B44A, 0x4C82400F74EE4680,
    0xF19525BDCD372DE9, 0xA044F3F679373DA2, 0x91E21C49E3F1F9EE, 0x261345AA585904AD, 0x190BC9259FA966A2,
    0xB227EE443B4EA2CC, 0x196DF1B57530D5C6, 0x936FB08968D2E85A, 0xDA632D4012E910C4, 0x080AC477A5321023,
    0x05FA26FB9DF5E726, 0x3447B937F1DDD421, 0xF0E1877300176370, 0x75861434185ABDD3, 0x1EA432126F811BD5,
    0x3FD9308960239299, 0x918315F1B6D563C2, 0xA4334F29A683A524, 0xA87B85B05944E46F, 0x30066124ED79B852,
    0xB66138BCD0DE35F8, 0xD2206E47AE71E495, 0x364AE0B537F36AF6, 0xEDC57A7C72525706, 0x741176BDF63CD0C0,
    0xD040CB43377BE81F, 0xB4BEFAB89ACE4C07, 0x00E418565A90B26B, 0x210EC29E876F1F2E, 0x49F5BA4813AAA5CF,
    0xA45D77A9115C4FBA, 0x39A713E7A1B3A14D, 0x4F55409AFAEA9CE0, 0x13BB78D5D88DD16A, 0xFC8BA33E64515FC0,
    0x90F403C53D6A691D, 0x15BCA628E6FEB1FB, 0x4480CCA5A90B61C0, 0x969070DD8EC28726, 0x6C7D81A8D5EEFF2A,
    0x48A0A973B7971801, 0xE2F65F21C5FC8A25, 0xC7C4C639E15ED014, 0x9EF7F905BF7DF6F9, 0x8EE4828AFD79A242,
    0xCC07C95989FB6A8A, 0xA650068C2D88EA6A, 0xEE8A0C3AC1F11DC8, 0xF9E09139742FA76C, 0xAB40CC32DA76B6BF,
    0x447443BD364DC8EF, 0x2E823271CDB930AA, 0xB30DC7D08841335A, 0xC6EE7D647703565D, 0xA7E251DE6EF1F8C6,
    0x87E4EFFE6B3A2617, 0x3F040B67143CE027, 0xF9858B2B11240EEC, 0x512D29909E702A33, 0x5E5DAD291E013306,
    0x4B839E9B8456512D, 0x340EED1B05EEDC05, 0x1DFB76903466DABF, 0xBA0F9FA8D4C8A231, 0xF24430E792C6387A,
    0x43F1B7A4D06DB774, 0x9591CF8FEB472530, 0x7282E6C835F62E0B, 0x3DA6E77625129CB7, 0x2F0CE64870AA2DE8,
    0xF7E5425CA8A4C914, 0x9FE6A0583042031E, 0xCD1FCE45771FE416, 0x566B5032E50D3868, 0x659019CC9163EB9C,
    0xDA9B5E6E6D97DEA8, 0xF00531E57BF442BA, 0xDA0B447338BBC08A, 0xCB0637B538E67E27, 0x1D5A1AF9E8D9DA11,
    0xEEEC848A3A51DBED, 0x54BBD7B24B7C29E9, 0xBEAF2E69B31B6387, 0x0DB5DDFB401CC4C0, 0xCB8A5E89618E6BB1,
    0xE1C47450D4744EEE, 0x8A3F96F0AB408B09, 0x717854E0E30BA571, 0xB5E0BDCF1046AED9, 0x82EE4D8F093058D3,
    0x49ABDEFB5029743B, 0xF0E7745127A10EE2, 0x1A2D96C2871C1444, 0x0BDDF82E1311BB36, 0xF54128FE48F7CD43,
    0x03628D4BCD47E127, 0xD7E072A38B765484, 0x48259BE7A9F3C99C, 0xADD1330CD952DA3E, 0x802521EA33DF02EE,
    0xD962C09A5E15819F, 0x043AB3896627A93A, 0x8B981038B8BE501E, 0x46D2061E65F7C336, 0x0BBDB952DAD3FDFE,
    0xFE492458E095F740, 0x24A5963B5DEE9345, 0xC72D9E07997C5A17, 0x46F2C45DE64A12B1, 0x1F9C62C55EDDD354,
    0xB344C64422EC3AB2, 0xA3F20CEA1B362CFD, 0xEF03CEF9C44B2DF5, 0xF2F89BBEAD182D71, 0xBFEF07FEBC161A8D,
    0x0C829BC54DEBCA21, 0xF22D1F7A844855CA, 0x0EFAD5D052953A9E, 0xCCB3EE19D485BB35, 0xB5F4600534FA2E6F,
    0x83CFBFC82A38C569, 0x2C6824B54BFA4B4C, 0xF6663067415A5936, 0xF1DD11E07D2CFC38, 0x28077896C747291C,
    0x85819D5502B847F9, 0x4C9745A955D5AC9C, 0x493AF9D5D5471B85, 0x7556519ECE344D73, 0xD302EEEC6970AD48,
    0x78EB22196185ABE2, 0x9E9C86108BBB6900, 0xC1AED890B010258E, 0x3B375C032C044A52, 0x6784AC1281A446E3,
    0x0AB258FC40DC645C, 0x5137BF9673D9ED0F, 0xCEFB760E39E721CD, 0x24939DE497DC296B, 0xFFBD45AEAF7C62B7,
    0xA71CE78E9C2DEC92, 0x68CDCC3830F93DF3, 0x7CDDF3D016C8DD2E, 0x2F486195ECD9D6EF, 0x83D61DBE9472E0A8,
    0x8E2AA749BB442A57, 0xA223CAC2965385AF, 0x815FD37868AE2C3D, 0xFEDAE9091FEE493A, 0x507598142AD06FEF,
    0x938BDC428D0B988C, 0x5421C574A3BEBBE2, 0x17248740D5195B1C, 0xE8CC8BC140E614D0, 0x0D5009F65953C92B,
    0xD3F78EC7E521D6EA, 0x394B5CD2D06DE73D, 0x2AFDEA7A3C1A588B, 0x3DD41D2DF9B6BACA, 0x11220EE4D2C22B2C,
    0x3E9F2B94A8CA40E8, 0x34E17E0D722D7456, 0x197DD813D3A95347, 0xF9AEDB11BD86AA30, 0x06F18D904584ACFB,
    0xA13BF0E0DFD1E414, 0x9ED5DDF2639A7D23, 0xB954718989678334, 0x3B35E96E1358FF45, 0x6222E379F1A590F2,
    0x7B7467AADDF09DCF, 0x11DA3B11B3E5C727, 0xC7BC3EFF95C915FA, 0x47C3320BE3B856F8, 0x5ADE8280C748DE1A,
    0x8FE76E063AD4ED07, 0xE4F125DF525E5C55, 0x3921B5B4EB5B565D, 0x694D653152413A50, 0x23DD5D54A61998C4,
    0x4920E4B5C897239A, 0x5B002D0340502693, 0x26826E2A41F19B63, 0x50FF363430DD68A0, 0xF9D699A6AB3BE3D0,
    0xECBF7FB39849C5C1, 0x71B7E05B7950D97E, 0xD3741C5BA4FCA501, 0x246877DF9B60F63B, 0xACD3CFBDE7634C9A,
    0x3BEE1B8AE32477D2, 0x2294A8B9A57FC706, 0x981AA97F6FBC6415, 0x68EFF9797848434D, 0x9B3AD872D61AF021,
    0xEDFAE82F817BE956, 0x5C2BE5684FA114A8, 0x50E5B0C4C356A912, 0x8B422424B5F960D6, 0x86C5BA7BAB53C7E4,
    0x2F78F1A72C7A6E60, 0x065A1441B0311141, 0x1F3DAF46F5509F58, 0x944DF5FC82C7658D, 0x2CEF8DA813F23551,
    0x4027DDB9F73DF237, 0x91A105BAFA8B606A, 0x36AC75B6E823525E, 0x8D32EBEF846DCC9A, 0x3EEC66BC172EE865,
    0xB4F771F3EF5557AA, 0xCB9A23E003214E59, 0xFFDFB2837A702BA0, 0xF558098B11BA2A4F, 0x7AF115D7BE703FED,
    0xB59BD40071FABC09, 0x4CCCF9CAE1486428, 0x515338A474B0098C, 0x25FF2895BAEC163E, 0xE113D8A61475A026,
    0x0B096A3C6767D168, 0xE64DF7A8B8AF6A5C, 0x87E63A8C4301076F, 0xA55C205971A7AD3A, 0x78D0583CAA6CD752,
    0x8451B62B018BB770, 0x6E0EF69982F1C991, 0x78EBD0EB6F04545F, 0x05551EB62FF6ADA6, 0x2F34DC877CDEF6A1,
    0xE939B3B28050BAA0, 0x4E9754CDE65F3E36, 0x22CB9350CAE89656, 0x12263A4631759E00, 0x05FA26356A1A709C,
    0x7E409526C5AA793B, 0xC58E9559B1C1626B, 0xBF588331ED9AC577, 0x4391BEFAC40E6275, 0xB3761190B493C7AB,
    0x1324D737C11BB390, 0x48908AEB14F551CD, 0x547B1CEFBB70EF59, 0x6A5C2EAAC23D2D9E, 0xB38B12EDFEA4B8EF,
    0xF381D058FEFDD351, 0x2D76E95DFBAE8475, 0xE76BDA530206EE2C, 0x2123497C0191C92B, 0xC37F086C8BF4E675,
    0x0645F3BEE21FA068, 0xDCB3549481CED353, 0x17E695F4AAA5F8F6, 0xE681705EFA5FD33F, 0xBD4E62F5FBC367FB,
    0xDE71E6A42DB6F3B2, 0x3C846C0DC7850D92, 0x96FD4D0A13C0088A, 0x15A2E777988D4537, 0x7CB3F9CCC3C8F0AF,
    0xB3503FA1E6C2A31A, 0x07EAFD1551C99CDC, 0x64934BDCD9E5EE32, 0x11CE51B4330DF674, 0x92CC9339C52522C3,
    0xADD026BA23FEBF68, 0x834F96A6D14F8B43, 0x9A7E60337A7208B7, 0x5BC25B797B866A6D, 0xCDAB9036ADBD9AE1,
    0xF19C13710DEA220B, 0x706D401F3A8F191F, 0xEFC709A5BA483F9A, 0x26F1718EE412E0D9, 0x1B89E216FA8667BB,
    0xC9E60992F30F5B3C, 0xCE683FC2F9204D38, 0xA13A767EAB365CDD, 0xCBFFDACA5CA6D98A, 0x4B4F34C6AFAE28BA,
    0x56C8CB84820AACEC, 0x2549CE90F46C0104, 0x770CF4CB007202CB, 0x73F3C874A89EB733, 0xBECB3AE388A4F11B,
    0x25CF268D7F2473B1, 0x712AC0325350123B, 0x2DAD4F78DB3C1B1B, 0xF33DCCE9DE946406, 0xEF02E0FAF0BA39DE,
    0x5EEA426AA78BDDF0, 0x575824E58A02D48E, 0x34F49DF8674D6F7E, 0x267A43D7C5F0235F, 0xEA5A61DE74DFE2A8,
    0x5F0DDEC04DD84CE0, 0x608A3E0B8923074F, 0x56108B202248C18F, 0x78B31E03777438BE, 0x2BCC2CC08984C7DB,
    0x15D86670F3793DB2, 0x535BAB97908A521F, 0x961DA5A003144D92, 0x793BB7B74AFCCA0C, 0x1C3A89F5EABCCEC0,
    0x676A2374C1C9D472, 0x78ADBB42EBAD6FF8, 0xC8F454EDE587D244, 0x3FD4FE6414077B49, 0x95884C6E39FCCCB7,
    0xCE9C80F8B61A6483, 0xF6D4A81157876D7F, 0x9A826FBA9CCC108C, 0x9F4FFD96736F22A3, 0x1C767816F43DF500,
    0xAAEA2BC6397FB35C, 0x44BEF0FB43FDEFA0, 0xDA42D57DDCC3F81C, 0x8657AA6BBDD19AAA, 0xAAE0A5E1758B07F0,
    0xA44FF9CBFDBE0A89, 0x9E0EC5059AB5E002, 0xB32916BEA6C7F7B9, 0xBF9B250BEB5A045E, 0x926119D77033C9DA,
    0xE0DEA6F62E6AD889, 0xA95F9D4683D3D39C, 0x2BFB198722B22B87, 0x66CD5F3B7CA4DBF9, 0x28FE2DAC860CABB2,
    0xA7C746A9C7A75FE2, 0xD4BA42F3C882858D, 0xA58E4C18C1DCE2C6, 0x3985E05F86D67323, 0x03445867C8C4CC83,
    0x9602B19279FBB593, 0xFAE8E4F6D6032403, 0x8C17B5CBC53A36E6, 0xF2DBF5796AB5BC80, 0x0A9634130E2547D0,
    0xE3999B5131E7A813, 0x95F28007491D990A, 0xDE0244008BE8181E, 0x1ACFCD4A9CC5BD0C, 0x8CD5260665837515,
    0x93931E4EE6B1108F, 0xD16343E8B12F0B45, 0x16367EDB8DF266EA, 0x80100B11B6864731, 0x6A0F34AD59DF9777,
    0x5A389D4E41C8BC1B, 0xB27D604C65E59F0A, 0xB32E2763B59F6745, 0x1856993CB9C1F709, 0x99649942F46FF3CF,
    0x513CA20DBE62D97A, 0x21699FCBD1B454B0, 0x8A97D348326694FC, 0xB225ED9C3605A192, 0x11E46F7CE29A95FE,
    0x0D60053B7724799D, 0xBD501235C36839EC, 0xB818EFDB87091D0C, 0xE4B01083BAB5ED61, 0x703ED6D8EC4442DD,
    0x510812BECA0D488E, 0x0A9E65D29B9D49CC, 0xB14D5C0A42E92902, 0x4CEFA68958D207BF, 0x313A9A72050C9144,
    0xDD4E9289AC8139B0, 0x8F4C437CE9018B8D, 0x33CD0DBF19724A53, 0xB3FFEA6EBB48F533, 0x4B0C5F545C500FAF,
    0xB8CA59320641D107, 0x44A58CC1A3848720, 0x5E503A400C0DBB5D, 0xF3F9D723A857CECF, 0x0C9C20DBFFE3C9A4,
    0xFEB290A77007D770, 0xA3D99DEF8D276192, 0x5505B4BCBC1DD5C0, 0x0FE1AC3984205567, 0x597F0BC2F5A66C5B,
    0x5A48C82051D75CB0, 0xB60D1B4E9FA610F1, 0xDCFB337567C5E52F, 0x0C629BA3D5C72061, 0xACD2E6D1F5A79261,
    0x07CD48EB77F51F45, 0x1B57333AB4C0D69F, 0x27FEF2C46D323649, 0x8390B5A32B3F5DB9, 0x209A08714C494BD3,
    0xF1681ACD9D47C847, 0x08CB07D1DAADD581, 0xBE2CCD40C36CC310, 0x4106574D39DA16F1, 0x3435DC71C1FE5708,
    0x0452E5E27898A609, 0x00DAFD8569AEE54A, 0x8BAD82B78BEA6F4E, 0x2B99DE3FB4BE7A72, 0xAD7156E891BB6A85,
    0x8E9DB4F6381F3A07, 0x8B43F0CCF14E6BB6, 0x0F81DBDD99DADD9D, 0x8E81FC229BA0D0A4, 0x896630E1EAC74267,
    0x4F59C4BD258B7507, 0x0BBC674DBADB9515, 0xC365696BB381E1D6, 0x9B62C779EE01E9E0, 0x270C53C21E20C838,
    0x839171129413DA3D, 0x822D4F40D934B926, 0xAA2747797A4EA6F2, 0x7B6BC1864D470651, 0x02C053C2518042EB,
    0x06CA2D35934ABC48, 0xFC63FECD35F71B41, 0x9DE5E2FF333ACB0C, 0x0225F93AC98A9E19, 0x682067B7004D7B86,
    0xABF48E8845089A70, 0x2166FD283F94BD8A, 0xC30FB4881C7FB89B, 0x7313711322EAB073, 0x2A58A2667BB85739,
    0x56C4B8E703CEBF08, 0x59C61691BC562EDD, 0x1B2497EB48F6B62F, 0xE80C465C5D84A0EC, 0x0E20143ED05633E1,
    0xB05BDDBF48B7A350, 0x038AEDAB121FFD6C, 0x0F169537AF5E105C, 0xF62C24E2CDC1E7A0, 0x15A6C0FA0B8D618B,
    0x619CAF09DE2779D3, 0xAC314E0405C26B7A, 0x0A837254A170D90F, 0xC24D44992C53AB9E, 0xF9A63B1FCBEBB71F,
    0x7E1B4D6A4F3451ED, 0x262689A4DC5006D4, 0x68B9E2E2ACB84A0C, 0x8021667C38CE6881, 0x8A8BDB992B0BF831,
    0xB73EFC7F4DB78850, 0xFE3249A2CD4E3B34, 0xCE71A404916139A5, 0x7CCD2A56C411BA72, 0xF0570AC7F2E309DD,
    0x4CE4875CD6374CD7, 0x3A2E35BFF9933596, 0x51D345B31EFFDC3B, 0x17CC7E4D1BCD53EA, 0xACBE2E35553326A7,
    0x51FD7818F63A148E, 0xC84F4CEDA6EE25AA, 0x608B2B5D93112840, 0x9072124D7E19DA9E, 0x808F11F0685CCE9A,
    0x678356450DCD08D8, 0x1D2E615B22EB050C, 0x9A35A7664553281C, 0xE9BE58CBC97A824C, 0xB769F5807DED8469,
    0x3525811930253DBF, 0x1C6B8198956115CF, 0x6A0A631A8E64DD40, 0x3DD03FB020BD7B9F, 0xF1D155723141CF29,
    0x37A014E355E46561, 0x3C2EB0EAD2079968, 0x6FEEC4F741519788, 0x8F3F4FA7A1BEE8E6, 0xE664FDAB2DC32A03,
    0x38D746944339F62B, 0xFE73864C8236E59F, 0x8B6A9CE8FD0EC16E, 0xE59B6A01A99DCFB2, 0x461E43E631E3DF93,
    0xB8B05BF0500B449C, 0xFE85AF8970C48600, 0xFB20724F098588D2, 0x7C2595E1E4EB46FB, 0xB0A7CF9FA83D63FF,
    0xBACE0EEAC9772374, 0xE0308FED34B1BB9E, 0x7269A1AB7734C98D, 0x02CFD7357FC47F1B, 0xA819B95B89DA133E,
    0x24227F2BDD82FAC7, 0xBFFD0D1020A66069, 0xA0668E902AB76A0C, 0x95D3B9FE87826F51, 0x879673B2EC9C2FF1,
    0x03DD66729B01B4FA, 0x0109F2A6781AE203, 0xB886C9BE6D98DD61, 0xA9D55F6DE716C104, 0x3768D3F8DE907974,
    0x4A07414D22CCB52F, 0x63062B4E14AD838C, 0x9EFCFB46E67E75C9, 0x8D13F5AD29DBFF9B, 0x53DF4DCA5EBD5FEE,
    0x5A3507FA5187538A, 0xA308B47CE9A80819, 0x9F32924DEE046819, 0x4F2C0750131F8660, 0x292E77C768F98AE1,
    0xAED26359DAF8891E, 0xBE772FBC837760C4, 0xF3104DDA348D06F6, 0xFF93294D973141BC, 0xEA5D596D81D3A0E7,
    0xF13B5239986C7263, 0x88EFB7B42BF41FF9, 0x49B8E261D8224785, 0xD92B9F8789CFADB2, 0x7D4941D262EDF434,
    0x2779419DB01E4607, 0x73B7933BF8D03936, 0xD5925BD767A1F6AE, 0xB495613626F29D40, 0xF42E416CD6AACCF8,
    0xD2B1494A1438EBB3, 0x239F470A8A343CB5, 0xCA80FF9FAC567890, 0xA54EB9D3E0A97D54, 0x4CC0E2F4652B7096,
    0x1DD9A7338E4D6AF4, 0xD4E12BDAA8F05F60, 0x0D3530500ACA6DCF, 0xA41327DFC86DA374, 0x4D566A72345D7C28,
    0xE007D8E222E7B513, 0x9DC64F11D9BB6265, 0x8CF1C20C727F488D, 0x12BCDEF6FBFA8400, 0x0857C84C8A2741C3,
    0xFA42576143CDEE2E, 0x661F5E7EE69BC5CA, 0xA416E66C2345177F, 0xEE15DE0A55A2A73F, 0xED9476BCDF439907,
    0xD8FBE92F39D983CE, 0x6F819E354D932BF9, 0x356C739535219895, 0xA205F5903E417A08, 0x53FEDAEF5D9D9D49,
    0xE675EAF9AEB627E1, 0x40E68F767A74E3AF, 0x690E71EE6436799D, 0xB64677A2547D8A8C, 0xE25963247F1314FD,
    0x6A12340F56FBCCF1, 0x79B33B1DF40B19FB, 0xA0036FDC3301A55D, 0x75C0292A05C1BBDA, 0xA423258373026C38,
    0x61686071D940ACC8, 0xE1F99F29EF690082, 0x3F56CA7C949A38F7, 0x29438419354FFE7A, 0x44E8E6F3D1B5B4E1,
    0xA484E54712B32507, 0xF9AFE8FDC80988EB, 0x3F6206B67D79E3D2, 0xBBC0F618C68D94E2, 0xF8A9E9C2A6540F5A,
    0xCA0B83EAD9D269F8, 0xC09BA4FA5994FF7D, 0x1A28E26A6C075AE7, 0x84A74164B2F98AD7, 0x427A42248896212D,
    0xEF286CBAF31149CC, 0xDDD6737800C55E55, 0xF6E4EDCEE0935D88, 0xDE9B5FECB81658AD, 0x0ACA71416CB7EF13,
    0x7FEC9B9D3DB8C6A9, 0xC999EB73339C2D57, 0xB9867800C17275CF, 0xC494EF4859EF3733, 0xF256E7AF3D3B24A4,
    0x19EDC39220E7DA67, 0x9432BA95D27F9709, 0xBB7C01BEBB37C4B2, 0xEBE08BABB664474C, 0xD561B2BC87DDA6B1,
    0xFA797701C8284AB6, 0x32C2CCE29EBA9772, 0x24A1957F0F37B7EA, 0x377564E073D8C844, 0x4B755B89E25B3673,
    0xFB989F6561BD82F6, 0x8C64BC782E7BA693, 0x8A8322071AFB47A3, 0x247CE6C1CF626474, 0x6C2888C0F50FF05C,
    0x0A5EAC686E34C9A3, 0x9107FA619BDB7962, 0x91BBED3AC38E2363, 0xE4FA5D111DEAD01A, 0x87A8EBBE08E476B0,
    0xD5A02133AD9F54EB, 0x0B6C1563D5873FB5, 0xFB0D9BD1320CD862, 0x1F4DBE2D8072FAA3, 0xED9470EA6A237D3E,
    0xBF4ABB783D71184A, 0x968B5F938A93B2ED, 0x43027848031873FB, 0xA506F4D6987A3EB9, 0xEAF9B876B6A5B059,
    0x22B47505BF468F01, 0x896306411BA426D3, 0x31C0FBFD575C731A, 0x004C7C656215E410, 0x681660F5F2068D51,
    0x68676C04A7BC07E7, 0xFAA9626A0C482827, 0xDA1E6D9159EC83DB, 0x543C3012757F7564, 0x6140F6A3AD912536,
    0xF7FFC870EED7BCF7, 0xD2FC110A60E2963E, 0x52597004A61AAA1B, 0x5C0E2EEA2A59A7EA, 0xFBEC3D518D923127,
    0xF18E38BA0766958E, 0x5431BE990760CFE3, 0xB26DF57BBB9491F7, 0xB527D514EE9CF60B, 0xC4CEEA8AEC728DCC,
    0x6F61E26C21E57D64, 0x5A9F293521ACEFD7, 0x150067A5786E5F99, 0xD2E99C868D0900F7, 0x54BC358FD17E07D1,
    0x0F84D84915D0CFC1, 0xC9588BBFD2A65139, 0x7902CD21D9CF7420, 0x1BD1573697AF357B, 0xB647574E7A39F0A6,
    0x988A4DE9476CA7FE, 0xDFA1D42969F2FF65, 0xB6420A3F25860083, 0x805C076D110A1B2A, 0x0CBD6C754F66E5BA,
    0x246DD0CF919411DE, 0x67996B5EBF51D98C, 0x06FD1AC6421F675F, 0xDB76E98EFE2328FB, 0x885563647947838F,
    0x8A8144C1ADE2982F, 0x6E89B922B991CB5B, 0xDC3C30D80CD23B10, 0x738C59834F9B1565, 0x55E1B65831BF6D60,
    0x7114DCECCD1D4188, 0x61A6A12A4375F46D, 0x8F3D5EAE6D2BDC5F, 0x4ED551CAB8CCA05A, 0x9FF561CD0ACBA7A4,
    0x091526F52D4D000F, 0xB863C3A08C9EB6AF, 0xA35801E853002A3D, 0xA63EB7EFF6552B8A, 0x54A91126B5875C41,
    0x499E0D4CFACA345E, 0x597D23F44170CA07, 0x81E02B07EB6FDCD5, 0x6AFB552138F13A85, 0xB10CC0C98248768C,
    0xC8E40F9CCA483BA5, 0xF36479D7521E6137, 0x687582AEFDA9C130, 0x9098DA38403E6A6C, 0x10BA780F852E347F,
    0xBF921479B2167C48, 0x406F2ADFA3479943, 0x8CC87B3E5518FE59, 0xF2F348D82A156754, 0x92044495824F1A5E,
    0x5209861B8B19A1A1, 0x63041634A0F580CA, 0xF4FA34520034EB9E, 0xF4758626E638C4C2, 0xB9801461D40330B5,
    0xA30FC3AB71B8F8B1, 0xD1E01BBD3827859C, 0x97B8A15976CA3385, 0x00C38B60A2EFEF01, 0x82CD338F8518D55C,
    0x921DD11EA1B589BC, 0x975130DB50569927, 0xC685ACFF0B9BAE35, 0xAA0FE4A807BDDB39, 0xDAA563E5853DF06B,
    0x1E91A0994E8908F0, 0x9826E25C03EA7A3A, 0x13DD195A3E5FA868, 0xA09180CD4309E202, 0x1796C817214FE16B,
    0x11187ACA9208A72A, 0x96C5B49F61DD7B8F, 0x5436138A56700B68, 0xB6A64A467A00F637, 0xE887D89BE5EE6C9B,
    0x84EDF2DC9EC21D4F, 0xAF1FD20E878CA148, 0x0C4DCA6EB45C7999, 0xF56A77D15575DC96, 0xB1AB1793588EFFA5,
    0xFF13439F7F513ABF, 0xDC2D9FF6CC7CAE25, 0xEB248BDA706F1E34, 0x0DB10F87EF076947, 0x2B01B912D80DFD7D,
    0x1364AADAEFF75682, 0x9AFE5454A7C55278, 0xE6693444C9E13C4E, 0x18CD28D76B05DB8D, 0x182CD905E19C536A,
    0xE51B020C4604146C, 0x45143A7A7EEA5758, 0x9FED5160691EEFF7, 0x189B8AF6F4DA6B24, 0x9E68BFA099C2F9F0,
    0x68DFF48FC5E2C695, 0x91622C0F92824DBB, 0xC834377E7534B350, 0xD44E54903AF0D1C3, 0x99C0B3C8CE12BBAE,
    0xA8591A09BB25C7EE, 0x47EDF916590D4E73, 0xC8D665CC8480DE6E, 0xD10C780337FC5F5C, 0x61CDA56822FA6717,
    0x3540CAD91A940EBD, 0xB763AF3B09B611C6, 0x4A9B25AD5E20C7D3, 0xC22E5BD95E1C3749, 0x126BE2EDF2454DC8,
    0xDB6E952E92CCD74D, 0xFD74F2088C392DDB, 0xEAB3D44B90221A91, 0xA6D33A6254352610, 0x9273AB5ABF793FEE,
    0xD5AB0D534AD17E66, 0xAFD57C5BC632A821, 0x2F2AD351EFD09BA2, 0xECFA9F02E4DB48AB, 0x599B82B3A66A56BE,
    0x11E3395523EE0CAF, 0xACB34F93FE211BA2, 0x4E7175A9BE2B5637, 0x8F89C90248C36EE8, 0x3E379A7C1BDA88D0,
    0x83C9A627DD01B436, 0x432D52DF493A5141, 0x41F2D9E80033F8ED, 0x27D1CD622CA0B840, 0x89FDFE44316D6056,
    0xBBB45AE5F8239545, 0x7A4D71CDD45C8900, 0xC43A15F85981978F, 0xB3E772AAC0A323F1, 0x92DB5C3273A14D09,
    0xE70E0551F9AFCCB8, 0x0AB6FF04491DED18, 0x9DC44E3E33634B66, 0xDE12FFCA0848117B, 0x09E19EE14853EF92,
    0xDC4921F9BB00F0C5, 0x0369599417E99ADB, 0x4E9AC4CDD819F8EA, 0xC32702492FCDDA6F, 0x7EA3976E6446EEDD,
    0x2C15862978E2BFF0, 0x3629A5EE6D8BBB2D, 0x6C527A1AF98E8FBB, 0x09FBA546218FBE98, 0xE1A4482400936485,
    0x96B1469D562382CB, 0xFD81858153CAFF89, 0x7430FFBAFB1942CF, 0xDB95D3E27FE285A4, 0x6403844CD2F014E5,
    0x0E99C92B04954587, 0xABBFB7E774E49EAF, 0x7AB53AD8CB5CD568, 0x6B46E519013700FA, 0x1D00566729BA826F,
    0x782199B470797AE1, 0x8FACAF471078CCE1, 0xF08BCBDE93460AD4, 0xA9F9576AAA0A10EF, 0x4FA467ABB1EFEE73,
    0xE6DB9C54EF1A74F6, 0x052B412D5DBCDE4E, 0x8017445E6F75BEF8, 0xFEBF97A658F5FD5C, 0xBC6B67C28EDA820B,
    0xB8DDDC1F887DCBE8, 0x689C9845E4EB0A5E, 0xCF803F07026E23D3, 0xDD1D4FD9D77A49A5, 0xD05B397FC3D37C7D,
    0xEB85B2E2926D6D68, 0xA5C5AC1FBC5B4DA6, 0x98DE4DB18B24E637, 0xED167F70F9AA1FDA, 0x8C72E9EF31685C2E,
    0xEBA6327693A6B611, 0xE695FEEA361F5CF5, 0x1DD4E84D454190D8, 0x81DC99E1F2C86AF4, 0xAC8CCDD6F9763102,
    0xFDD208E5AE19E7C9, 0xA91C5FC30FC4FC33, 0x9DFDACF3A43A1495, 0x996276B68AE09DAD, 0xF44E425C62AEDBF5,
    0x5391C2CA0AAC5246, 0xEC4E9E21D7EBA237, 0xB9D2CC0AC60855EA, 0xD3C6BB44F44B39BA, 0x6442AA8315FBE898,
    0x4431844D81D4127D, 0x4A94FF4AF77E770F, 0x45B788511F6EE2D6, 0x4948A8A9717AD080, 0x6EF0954D564117B3,
    0x8F3F5B0B723DB580, 0xD2C13E66C1FF5846, 0x3EF648D9467B479F, 0x095BA769D2A8A67F, 0x8F808409650D96C3,
    0xBAFC3291739E23C6, 0x3B7F71760CAE9C60, 0x748D3A5085494A79, 0x11A2278F373779D9, 0x67EFDA4CB12C06A3,
    0x2B2E198D39B5D0AF, 0xB655952DE6F16546, 0x354680CAB6C92542, 0x9D50166AEBC7F32E, 0xB9FC1FFB35784167,
    0xECE9DA48B695E8EF, 0x8002A1B1381085C6, 0x162682CA6D8678E9, 0xC86C2C97E4C8F72B, 0x2977109299FE95BD,
    0xAA09D19D554B041A, 0x7D73C767B4678E5B, 0x0D1C465EEAEF85E3, 0x3493D20950C1CF54, 0x2539B550C599A782,
    0x61C1BCBDE7889CB2, 0x13899FDBB1A12D31, 0xDCB83ACC8FB32C20, 0xBDBCBF9BFA433190, 0x2D6753DB3181646B,
    0xBCF30579C9EF6F35, 0xFD20F5624606720E, 0x85D60B42F50233DB, 0x6451F4E36DD3E4A3, 0x32468F8F0C71C8EA,
    0x89A77295C363C553, 0xF60F1B51B27B42CB, 0xF0507443A9EA6F27, 0x7A6FBE231A7566F3, 0x2D32EFBE32192305,
    0x4111181AF8B655BB, 0x6EF0793A00282786, 0x58E8D9A0D6867BB1, 0xE79B7A50BD9CE739, 0x61436FEFA87FC72F,
    0x19DD43AB829CB555, 0xFC31EC652124A43F, 0x71CA220EBB2791BF, 0x423B3D7AFDF8CC5F, 0xB61F2E8A0C172F11,
    0x73381B2AD8F961F3, 0xB1B72FD3828C8C60, 0x04E30E45E756117C, 0x685B78B287BCB210, 0x9F5E55D47673E491,
    0xCE17402712057969, 0x19C9C68866C159D5, 0x7757716AF3CD1748, 0x32536A42497A6950, 0xB11773A7F78AC12E,
    0x7EDBB25BA5CE9179, 0x0B2C30CC20678F3E, 0x7CF60E0481103DE1, 0x51336537EA2801DF, 0xBC436E7A68801A18,
    0x1BC235DB3B9D50C9, 0x157233CC556184D3, 0x27215B85DD59DA68, 0x99EDB830C50D8492, 0x79D51F2333F6EC7A,
    0x4A36C3197B06D7DD, 0x46295749ED9EBF4B, 0x80158462B887BAAA, 0x45D389017BF1A8FE, 0x2038F35B2E346854,
    0x2C511B963A6C003D, 0x0D871654BCABA9D6, 0x5077A75FB7B2FACC, 0x9B4E5E625D9132E2, 0x017E2A0173CD6C85,
    0x86039BD04B28037E, 0x9E91D62EE5A81925, 0xB6BC25553FFA1A65, 0x2CACF84E0073AB7B, 0x8D71FCB38EFCF507,
    0xC4ADD5E1D15D1C8A, 0x7603F2840F81803E, 0x03E24FDEC7B3EDFF, 0x6AACD2E3AA7F9F93, 0xD05B6A9D2D6ABBD4,
    0x2CD214239DEDC9A2, 0x0FAC59DFBAD11FB6, 0xC337ABD10E9D221A, 0x6ADA5ABAA70D3CEB, 0xF207B095643183A9,
    0x37C79879076FB8FB, 0xDC28F26886D2CC83, 0xBA8EEC7F248239E1, 0x1B5C59D75037A819, 0xBCB532D2CE221B59,
    0xA18777E79C1149CD, 0x94D5AFA086714193, 0xC5DC762B69A765D5, 0x3CFA25999610B2D6, 0x983CCF36C9D8889D,
    0x02D1F05507F3B822, 0x4A4CD497197644B5, 0x010C7A7204BDBBC3, 0x7484BA4BAAEC1CAA, 0xAC0EDA792984A98F,
    0x6553BBDDB08C1728, 0x917B775FBEE40300, 0x3A8ECB8582B95382, 0x4B7549B9B69F034A, 0x0DC00490E21DB309,
    0xDDA4C859004767B8, 0xA7FA1123633EEC13, 0xC373C6BDC675F9FA, 0x07BDDAC897335FC6, 0xD22E78FAF38BE605,
    0x72B404216C9A773E, 0x771B98203EAFB9FC, 0x6E8AAAF783A6E42F, 0xB0A9A1F2E398D2D0, 0x12446F72956DD8F1,
    0xBF7A5ED034448EBC, 0x2DCCACD5E1841693, 0xEEC36CBB8C649A41, 0xF62A0DF2FBF18FF9, 0xA82DA8DF206C53F2,
    0xDAE19EEAEAB02A07, 0x785F588945CD742F, 0x2454102B44A29F39, 0xFB350C88D96FA717, 0x05C4DEDCDE108B4B,
    0x8051CE41272573CB, 0xFF6EDD432DF741C7, 0xC89BAD911F7F3FF0, 0xFD0D1C5ACAD4DD13, 0xA86C2A4853B59F80,
    0x1F6D98056DA0F528, 0xB2D26049EC8EB768, 0x1116E7B042AAD158, 0xC025CDF08CC870DD, 0x3827BDEBFDE74EB6,
    0x35D4239346B19D42, 0x9B92400820FB2ABF, 0x42E46884BA8F111B, 0x3E50F3B5F98A5C5E, 0x3D02FAF94B78C0CB,
    0x48E61F2402F1DA90, 0x88A24DBF7DE9B6E5, 0x53962CE64B5DC878, 0x8D31EBDD7891302E, 0x91D615FC17750486,
    0xB85F2FB5DB8B8E7E, 0x6B8F22B3271E3C82, 0xC028A8F7AEECF6BA, 0xE93D5D615B3D43F0, 0x9A5947975DEF15E0,
    0x6FD9E002865C21DC, 0xB630B919BC387869, 0xBCA20BEF9CBDABD8, 0x0C5D707B055E31F7, 0x9D8D785C8075CEDD,
    0x7A2CAD35AD686880, 0x70068C50820E5BB3, 0x9D83537E15CC023C, 0x3DDF8C4063A54BF5, 0x517DC368413FD6C2,
    0x252D4E114E4C324F, 0x519EDE36F6BF741F, 0x068904FE930F0721, 0x9F592F5BE173CEED, 0x8490237191533B43,
    0xE656ECF4477E615D, 0x736528545E8D2F50, 0xB236FA5C193B51FE, 0xDD234A05F2E5AEFA, 0x3BFD80C331447C82,
    0xCEA7AD480077DCDC, 0x130BB2E78B2A1E5C, 0xC787E56F405ADF1D, 0xBDF07BE9C3A90DD9, 0x14C770EB6DD1ECC1,
    0x33BD4FCFDAA3FC7B, 0x55BF9F471DB653A7, 0x89EC70EFD595F1A4, 0x11F199509EF69D74, 0x9D65FE321BCF5A33,
    0x8F6B92870B80A4A6, 0xF8D8570BFC280FD6, 0x2ED2C6A9498ECDD1, 0x31791A9B5247569B, 0xEAAB7B043BECFD6E,
    0xD9CCC32EAE66203C, 0xB4B759CD7DC81209, 0x963F5DAF4E2314BD, 0x30B5F8BC67643630, 0xFBD6D4AAB1D6E244,
    0xA924B2653BF2A440, 0x32F303C18103DB2F, 0x533D810276DBC79A, 0x930AD74BABCC70E7, 0xF233C6082725F2C7,
    0x02E278E551ED9756, 0xE5B441B3A7E6FDCA, 0xD97F70EF9F2B3152, 0xFABA799EB9565768, 0x75FCCEF83C62C2A5,
    0x09086676D8FB27DC, 0x9848A0E06849015F, 0xC0C4A0E27BB17756, 0x15BCB68CF81F4ED7, 0xD526E089E15C0107,
    0x55F64E2284B2D8AC, 0x26B7A1105436D46F, 0x9793991579545F9F, 0x235B2F2C179FA4E4, 0x3CB6C9FA214EFE35,
    0x8DF91F1D5B5B74A3, 0x0E908BD89E628604, 0x711DF15D1BD567AD, 0xC2A0EF2BC48D0AA6, 0xA84A5D0C8E5530C6,
    0x12AF8327955E7141, 0xB7190FC2BD48A164, 0x57D2E8025124990A, 0x79D2001819EA11B0, 0x6DD41952D90AF51C,
    0x13DDE3C040FF914D, 0x52B1BF3EEC72608C, 0x627D1A7081EFE6B3, 0xCC323FAB84324003, 0x2446B95670AA27BD,
    0x4CD889FFACC5B477, 0x72517B760BF0A843, 0xE7577A9ACC3A9F8B, 0x1744B8EC57077FEA, 0x844597BC6A333E6E,
    0x997B2D0068B58412, 0xB28719321115C59F, 0xCBF62C9A7F37B3FD, 0x00A995BB1E75D658, 0xB9F88B79E9AA2BE5,
    0x5D2E3F27DC89DF98, 0xB0AC925495A55B11, 0x4DAD0C364FA4F577, 0x822410E56D7EB516, 0x2AC8240FA8EB0D65,
    0xF7FEE22653BE8A3F, 0xFC15242B8D45AF6E, 0x83171019C501CE43, 0x8E4DD21A49980148, 0xCB516FC3ED22C850,
    0x7F85D7832B595CC8, 0xA80D92942A5347FE, 0xFF7031B056244EDD, 0xFAAD2B298DD7C524, 0x0287DC227022D0C4,
    0x2680898F2268C13F, 0x3AA29AA072F1E251, 0x262293AC221C8D7F, 0x8C5CD86616210B64, 0x888FCB1CF61B64E4,
    0x08240BE327556D86, 0xB11B5EA7A11FFABE, 0x3EBDD68E3CEBA003, 0xED48741D3E3B3A35, 0xD205C7CB2BDAE92A,
    0x959388B15A554A4C, 0xD391599E9F850747, 0xB268CAE8EFCDB86E, 0xAE9989E51ECA5883, 0xE016F6953A7EBCCF,
    0x5DDA844FCA136EB3, 0xF50C1FAD8B5E3857, 0x7052B23DAC251C4B, 0x2CEBBFA10D74F73D, 0xBAE4BF5EC85DCB33,
    0x6ECD074ECA7B0013, 0x7439EA781843282B, 0xF826B6D4FC3A573E, 0xA750BDB893075E72, 0xBC5CD0F1006586D9,
    0xE46C45CB26A878D4, 0xB4468180152AA8B2, 0x237AF83AC7C14B62, 0xDE43787A6D664EDC, 0xDD2745706E1884EF,
    0xB33523FD14B27C5F, 0xF8316C3CDD98F68A, 0x7264C064A492599E, 0x7FD51B3E8DF0FC2E, 0x28E3885D08DE74D2,
    0x1E8C8E61740B99CB, 0xEF1A530FDC2B21B1, 0xD7A77F71CC5435EA, 0xF4DC6C619AFB7A8C, 0xB8DEA2C39263EA68,
    0x5C85EBA939E5E34C, 0x91D1F37270E37019, 0x8C0F02322B38485F, 0x975C10C39C456291, 0xE7D961644995DDCE,
    0xA72B6DC4D9463112, 0x16D1460966004C54, 0x0F01CA04DA4C5050, 0x8270E5C873AC3829, 0x3A165559C71CDB57,
    0x12AE1D6EF036D423, 0x7F3EECACACB528C5, 0x26804C8AC3B7CAE6, 0xEE5D3658B8B0D37E, 0xC3724F6A157556E3,
    0xAC296923A01F2BB5, 0xEAAA32F08C3E51F4, 0xFB938B327EFBA699, 0x38FDE3B23D898201, 0x54780C20AAC067C7,
    0xCB31444A69709065, 0x20F27CFE5612207A, 0x80A98B23592BDD63, 0x12F277EFE79DC3BC, 0x05CFC5732C2F1900,
    0x264E84FED4AFE87E, 0x5938F9D55D6B03A8, 0xE276B43F5FFCEB37, 0xBA35EB93DE71AB29, 0x0DF965D001B378FB,
    0xD3EC97AEA96B47D9, 0xB3239311B8A0B755, 0x1C3334B26896AECE, 0xE5DD13F8F0552617, 0xDD43E6B6155459F9,
    0xACBB475AF5E2CE22, 0x1F6A2CD1C82FD35F, 0x3190BFE7A3F5823F, 0xA76708B272E5C3D5, 0x91AC47CC22ED7D6E,
    0x8D9AE3B6057FFB86, 0xDCC9622591A3166A, 0xACDB3AB6ADB399AC, 0xA75BE1B59C637E55, 0x25C64D9F6107BD5F,
    0x78F357578A9E7DDB, 0x017CBC382719899B, 0x288A761CCE72F7AD, 0x0A8DDFA7A597620E, 0xA12FC8CBE3F084F8,
    0x0CE9778F21FFF1BD, 0x37419A2BE8F566E9, 0x048FCE6933D1FF00, 0xB9F1C30EAB900DAC, 0x664071B665F70916,
    0x0F5871EE35DC171A, 0x8D50CDBB75F3725C, 0x8FBA343518CD358D, 0x7FA3D9FA224FCDF2, 0x580BA591476620D9,
    0x64346ABD2F9FB191, 0x929588C1F0A0E7B3, 0x0FD02D64951295A9, 0x598E8345BB286998, 0x0952B27935A99EE5,
    0x766595BC71AA2087, 0xE688C1B2A7A29B64, 0x23165A44FE5FB10D, 0x99F3B24509668CF0, 0x6C41E3AB34EC2D75,
    0xFF8F6F408B94CA2D, 0x32FE947DF4CADA07, 0x2DFD73361A5592CB, 0x73372EFA30F49B55, 0x7D09DD0C55B48E77,
    0xE5120725E7DA93F4, 0xA2551C3C6310A6D2, 0xD4E0D420A517A76C, 0x36782A5C7C74DFEC, 0x166554053EB88FBA,
    0xF3E18BE1CE2C4F4B, 0xE8254C4E52123983, 0x44876659FAA43F83, 0x47259645AB02A655, 0x38573AACB1EDF3F6,
    0x76CB93F13FBA2A2C, 0x958A75EB4DF663FC, 0xA18F64B57EBA4334, 0xC4A70B2B18DB7610, 0xC54AEA46427A4955,
    0x17DB45C180AE09FA, 0xABEC33E89045269E, 0x5BFE3113C65DF066, 0xAEB70AE818C9AA64, 0xE4AE456266B8BE1F,
    0x61991BC731F9C2E6, 0x26309C10BB1A8DDD, 0xF3E2A2659FB98B33, 0x05976D7675A587A1, 0xB06C5223F98A0D05,
    0x9A79718EFF019E82, 0xAA1046648F9A810F, 0x8E9E36044F83FC34, 0x40779D52B6F7C162, 0x8D0AF14252637BFE,
    0x3596EC3DDF70C373, 0x3EEEF449A9AF8B20, 0x3364AC1E42B62B48, 0xE62950BDD1F6AA38, 0xC5A749902FB0602A,
    0x727CE9A435319DF3, 0x64ABFDE77F196CCC, 0x3E677FCBCAD54402, 0xF53410B597CE83E1, 0x55A6618BD690B74A,
    0x516DDBFAD3D0DB77, 0x6A3EB6106F0EA72F, 0x991734E9860DB84D, 0xF5778A2041796A15, 0x4B1C3EF1C1726234,
    0x3323FB7003911F25, 0xC8DD3A15E0025932, 0x274AE70FC892C278, 0x91D00D33832248C9, 0xBEFCD373705F3911,
    0x4267AD576B44BD9A, 0x736F2C1229C6A7B9, 0xD7C291D0870AC3EB, 0xCFE4C7A4CCC7C4FE, 0x44AB4A756B961E0A,
    0x7ACD03990746D5F5, 0x65CD7B0E3B885D50, 0x1D2ECBC830D841F4, 0xFB473E707A316534, 0x721924E91195B28F,
    0xF113A64934D294CE, 0xA99BDDA3797AEEBA, 0x8EBE85210E7246F4, 0xFE4B5A9E609AC385, 0x5943950F92EFA1F7,
    0xE412E7EAB266BCC3, 0x4A1D2071402F651B, 0x5BA1B808CB05C0CB, 0x2837812FE2748C52, 0xC47867042AC4C036,
    0xC70C7F80414B9244, 0x30437DF556DD65D1, 0x21A3C3330D95B8B8, 0xF9A8BDD65860EA78, 0x773459268E7F64A9,
    0x335FCCF8133514CB, 0x13E237C732615264, 0x325F281FCCBDEC00, 0x8638FB797BD4F309, 0x75C9ED056AC3D564,
    0xA051A75577FC4D13, 0xA35427AE0713C7B2, 0x910B2C7BB4A194C5, 0x18D0C2201764A014, 0xD791CE265E8B33B8,
    0xA6C42056F3BC2461, 0xBFA5648A4C171E5B, 0x0AE75334DEB55BAB, 0x09D6E948D51F04F3, 0x430ABB9682528838,
    0x56C40C73CDB66E0F, 0xC7E44BC806A0DAA4, 0x02B27A455DC6C466, 0xA23CDFD160827780, 0x26CF5BA1EC674714,
    0x01BD7FB3A5597ACB, 0x8F5A3EB48DFD3B2F, 0x01F286910598A8A6, 0x764336916675977A, 0x27BB37EDB5F6D72E,
    0xA109E220420D0B89, 0x7F83F692C08C374E, 0x40133439B1DDF7EC, 0xD8016815DA120FFC, 0xFF9083D6E2600CE5,
    0x7BBF2CCF602283C7, 0xCF0B17467EBF56FB, 0x214C951F55DBB40F, 0xBB9130B4FC87C54A, 0xA199BE53EAA21AC2,
    0xEFF4842D0974C056, 0xF2E251B398F87431, 0xC3E7B2D4CEF5498D, 0x5971AF807DDA4AEB, 0x174C005DBF33A13F,
    0xA24D7374CF771C43, 0xF20858D24014A79C, 0x7532839C8359C66D, 0xA7F8049217CDBEBE, 0x0324089A3EFE41E2,
    0x0355E15631081673, 0xD7B83EC7F003EDD7, 0x0F58F9CADBE02C1C, 0x06C481FC36F9BDA3, 0x1722E53C263916EB,
    0x26A09A2BDD753C62, 0xC13698190323BD98, 0xE3D0F553D9721A84, 0xA7A063DB5EABCD83, 0x97051E8A0031B8C6,
    0x8B04641477DE23F4, 0x65FEC4C48B6DD8A0, 0x5FEACBF9427C5C18, 0x96D313DEC7D6E1CE, 0xAFD52401868C6D52,
    0xDDAC5DF15B25A77A, 0x83955D91035DA239, 0x6EE0290C4D862913, 0xD8E4996DB1363272, 0x78DD901C21738BE1,
    0x5FD672FF6792ADBB, 0x6EE6A9E36CCBE612, 0xFF2954BC44E6F0BD, 0x4AF1FB9186DBA9FD, 0x261F12F56DE01F73,
    0x5527F0778FD9AAC0, 0xE534537FC6302F4D, 0xB929A1208C69FC4D, 0xFC1A58DF7F54E71E, 0xBDB1D212B34216BB,
    0x9313F0C5DE4CEDCB, 0x32B07631CAB8C694, 0x0A407F139BB6EA91, 0xD180D192B46BF7A5, 0x8A030149CC816D0F,
    0x46C4D99FAF390112, 0x4A092C43287DF4A1, 0xB2FA3B129B4B7D10, 0xA06D862A34729994, 0x21A51B3A5A8564B7,
    0x9380D630251B934F, 0xBA51C52C08190B6D, 0xA0D8BD6CEF1BCC7C, 0x71821507C30F3E3C, 0x5C1F7AE149C4E415,
    0xA74281604848C363, 0x8A8619F4E8E692C1, 0x5339187C23C3BB09, 0xB808B0F98E5A322F, 0xEF28D7814E7CD6E1,
    0x4AB84DEFFB9CABAF, 0x55D2FA6250ADB9B0, 0x3D9FF6B81B3F8AAB, 0x2B75FD1CC56269C9, 0xAEC7A58E1A29A68E,
    0x27CBDA6FCA5B4D91, 0xE0EE613ABF8182A3, 0x998E2277C950DDE0, 0x0F7683763C5CB4E4, 0x04F73C253EC90F53,
    0x86EAE9DE10B197BE, 0x3F126AEC51A962C7, 0x4B313DF8CA977AEC, 0x12B65788D9BDB75B, 0x14F9A75CC08BD84A,
    0x6B8CC1B2A521BB11, 0x40A011700B11BFDC, 0x49CDFDC077C921AE, 0x99205F09EDE316FF, 0x59AC855317450B6C,
    0x4B12C844E48894CA, 0x1CB9FD8D1D2608A2, 0x39C003A2222DED53, 0xFC01A9064A72E99A, 0x1E247884AE34A1C0,
    0x17FAC33AD32A97CF, 0x605F2FE7655571B2, 0x3A41265FB20C388E, 0x62D7F2966EAD50AF, 0x062330F9E9E3F111,
    0xED6857755C0C05F6, 0x6BA064AA036F06A0, 0xF3974EAC7828C963, 0xD0CCE4A5500333A9, 0xE920F4598A52E1E6,
    0xDDBC1E1093FB0033, 0xC35090390F3BB13A, 0x4AF21625F5E07260, 0xD8240A35F315B4F9, 0x75ADF153DBBDCB2C,
    0x5CE26EDF443B9919, 0x76C4ECACA2760929, 0xB2664CAAB1EB3247, 0xAF588656EA350F45, 0xBAA3CA7C1DA86279,
    0xEC52F46485C1D7AD, 0x66A1BA235D25C16F, 0x97BFC42D80F51D5E, 0x0F7BAC4735218B31, 0x8FDD75A85465820D,
    0x66149FCC28BFBCF2, 0x1F8DD44C2EFE0E6C, 0xAB4A14735001FE91, 0x7A9DAC3D7E0C6B1D, 0x2F48020784980E54,
    0x2A914F7A7874B277, 0xAF18228515046408, 0xBA73477E18DB900C, 0xD29CDB8868A2C54B, 0x77C2D559B8D9888D,
    0x033704E61D789970, 0x55B41FD8F8F7B1AC, 0x6F9D109F6C83D5A0, 0x4A0679576C16D071, 0x0EFFF6CD6AF867E0,
    0x9853DAB7E36C408B, 0xFBA0E2A14FFE88FE, 0x5DE34C08B674E248, 0x600768149C1FF25A, 0x9745A7B67CFB1056,
    0x26A183207CA275CE, 0x080B83BC93405200, 0x0AE9A00EC15408D3, 0x39BE3D5AC38F5274, 0xFB2F4A85B587E9B9,
    0xEEA4226210372416, 0xEEAD743CFD232636, 0x703205EFA2EC2D75, 0x2A0AC598513FD20B, 0xACD8298658C3274F,
    0xE38B1CDD1D76795B, 0xACD5287B2E6954F8, 0xDB7313052C436B66, 0xC5BB7C04D9E38596, 0xC670F4B98D6F99C2,
    0x0794996702B15690, 0x4FB6F3E397BCF923, 0xE5025E558A3B6214, 0xFD1D3A2F4328F791, 0xA1CCDB54C94580FF,
    0x911150DE3DEA72DB, 0x3ADE1538C4035AD0, 0x9541A3B76C414936, 0xE59F4C4984D4AFBC, 0xB80EE96798D2FEF0,
    0x4E8DDD1CA0E510E4, 0xD7345B6F414FF46B, 0xF3069E74005E8E41, 0x2F0565AA684D2B3F, 0xCE986DB1C3F1EB1E,
    0x9A64C6A188512517, 0x53AC32095AFF4EB4, 0xF7F48578B4E7EFC0, 0x7F0ECA0422FF4ED8, 0x2ECA840D98C701FA,
    0x82D7FF002EFE2075, 0x181BFB6798845224, 0xC57B50469EA0E658, 0x379CE92AB864F5F3, 0xAA5DE92889868CE1,
    0x32CB8EFC5B454E60, 0x248DE747AF531D14, 0xE24FC4555EA7D649, 0x4770D2802C4FB930, 0xC74E13602BC412B6,
    0x54F9F6B8154D6FD2, 0x012E03975C94C1F7, 0x1E7E2EA942A1DFCE, 0xFA0C5B1F6BDCF96C, 0x29D9B4D2C748070C,
    0x90741845E6D7FCE0, 0x8245816BFAFEFD75, 0x2AA2B7CEA77666FF, 0x337E8FEAC8D7B05E, 0x4EC8186C0F160FFE,
    0x1E0AC18A0DF95FC5, 0xFFD91C5558FECB69, 0x3553617C3B2D9CE9, 0x5DF9017875F90505, 0x5A7667C190ED8DF8,
    0x9F4ACE0B5491B055, 0x0C1402382F0765FE, 0xE96C8541B5F43E4C, 0x45CA18A2DCD4ED28, 0x75FD274F7DE9A29A,
    0xE33914C88B6AB04A, 0x0AAECDE44A840907, 0x072562CC3085BE15, 0x8C4168311BE14C22, 0xF35E8F30D523601E,
    0x77CE4AB78E514C2D, 0xB0B2E02E6171F4B3, 0x5D6DEE029B36AF2E, 0xCD6F0F899EF89390, 0x36816B049E4969A9,
    0x252B4B12EA491961, 0x7882EF1014975673, 0x90F274878C9335A5, 0x194A617C464CF041, 0xC6332FD81606F01D,
    0xFA1A85EEC74D8220, 0x3136B25EECFAB24C, 0x1012A5C7A829956E, 0x59AC80B130D009B6, 0x965EB3C94F6FC2E6,
    0xE772D71154974635, 0x289C720487AB91A5, 0xB563D8276909F08E, 0xA9A6CE80C0848C8B, 0x514EE394888CBBB4,
    0xD8A5E46B864154A4, 0x6034C91EEC9711EE, 0x82105373C55BFD00, 0x84FADB1464369E94, 0x313BA27B81594596,
    0xF2B57B2DACD1BA34, 0xE80CBC19C65A00AA, 0x84031C22397F18C7, 0x32F8FC9AA5845191, 0xC6FF48936B7EFDB8,
    0xA7497E2AFDE33989, 0xC81EDAC22EE93558, 0x92261545E8A294A2, 0xCA189A672574B3B5, 0xEF18DA9EA1C3E5AB,
    0x4396A246E8099D9F, 0x1DE5A03AF7437AE2, 0x8D8F488F0FF2F012, 0x0A4DEE04E266BC78, 0xFA65521EC677A4C2,
    0x4D40030F89E2A73A, 0x84C03B9C1D1E0A80, 0x12FD47A70BF8E6C3, 0x0E5FF6645B5E4F33, 0x2B17926B31C52D59,
    0x89C8BB4F1B984A35, 0x3A5DB89813072DD7, 0x0DF85B983A197366, 0x6ED1D8295455FC99, 0x3D22DD1CFB8C58F5,
    0x6A6FDDFCE39DF54E, 0xB459DDCCF1F44006, 0xFD5275F81DDD57C7, 0xB86212570F022672, 0x6DC4C4794CF0B62E,
    0x19DA7545A506E2C9, 0x234A4BC112A747AF, 0xE102006B745A4510, 0x4D77EF96B93C61A2, 0x71A7AD2C7B653F94,
    0x398618AB12211F40, 0xE9E878F51F769B28, 0x739FFF19A8C06F6A, 0x51AE034B29D30B00, 0x51301502CA68F67E,
    0x166B2A192903C124, 0xBF46238872DA86F6, 0x619BC389E76CF324, 0x088CEB9880BA3CC9, 0xD0AAA937E1735483,
    0x48AA3FAB4CA14750, 0x02C856547BA45993, 0x64B366198901DF05, 0x860627B6DC696885, 0x9F966E067EE5A93E,
    0xCA0B601A67C7EC35, 0xA0AEFF63DB53DA20, 0xDCCE8335828A53A1, 0x896BB764085B940D, 0xAA3E7BD0445A60C2,
    0xB4281D479C42006B, 0x4C148CFCA004D08D, 0x661678E04E43E7CD, 0x4ECBA74FA2BC7871, 0xDB2D7AEB1CBB0517,
    0xD6242CB01AA2D892, 0x745F5F33FEB7C40E, 0x344F34E675AC5AFE, 0xBF61C5F6A0CFD7A7, 0x359BFAF454F1EB19,
    0xC71483C32D54B923, 0xB5B6BF00C6FFF910, 0xA7AE13187C64F0DA, 0x6DC3987C92594931, 0xC123DAE9C8B3E443,
    0x92887AD06DC8DEEC, 0x241B72D4CF158DD3, 0xDAAB46ADA54D43AD, 0x4CD290C5ACB862A5, 0x047D690A1158228C,
    0x9D512CD17FA5B07E, 0xFEE5369A47E64DEE, 0x4FB2E7DEADC88BF3, 0x0F461FE0090C074E, 0x74B21D770BA161A9,
    0x788F7D9F9E963810, 0x5BCC8CF8C9EFB800, 0x2D55F5CE15890CE9, 0x2EA7AB0B15E37EAB, 0x699D03EE79F85B48,
    0x956698F82BF032A3, 0x6D85E4A7A8B3AB62, 0xC6B5ECD1F24DD6F1, 0x4DF9CE793BA43FC5, 0xBAC617407C8E9A78,
    0x7EB8DE6345B0E03E, 0x13B27218C98C65A7, 0x6EA4BAD87DF06D19, 0x665C760D9E2EC8D8, 0x5317BA6DD0BE3B11,
    0xEF4EFCEF118CF476, 0xFA914D072F7CB7C8, 0xE8CEAB9B7AA9B532, 0xCAC1591EC0AD269A, 0x3DEADD0AEFF1D505,
    0x32DCDF4A4BF36147, 0x32378AF4BD0732FE, 0x42B2C80B60365C0C, 0x0144119D6871CC31, 0x495A83A4DF07B7C8,
    0x655EB7822D7D9477, 0x16A6E39863993672, 0x5535DC0844098EBB, 0x5FA5C2D4FEC8D3F5, 0x12AC5FC30500A5EC,
    0x61BA12FFA8343124, 0x89005B95438B0BCF, 0x88FA36C8E51755A1, 0x2601CA496B4C8DC6, 0xC83AB3369B482BDB,
    0xA9D5BFCBC212371C, 0xA358798CFC9B0ACB, 0xC4C56E5DA7A4BF0E, 0x7CF461E5026692EC, 0x033B52C90CA4C322,
    0x46D664A4C9835F61, 0xED1E4913C10620FB, 0xB1E0EFD66715EC52, 0x00F1E71D6FBE9AB4, 0x57A83C6573348A49,
    0x45195F87618D3F97, 0x0A76F34624D62283, 0xD5682976DC4288F8, 0x92533D7716E31B83, 0xC2925360CEA94A47,
    0xBD7A6F8874BAE649, 0x4931EA8B59818FC9, 0x734C7ED6C6A04028, 0xF8CE9DBFFC008108, 0xA7CC81FBC737EBE7,
    0xAF68B9F4F23F20BE, 0x8836D2E218B4114B, 0x41902C5F37E2EE6B, 0x0BE3BAF351BD7C33, 0x08EF484C249DFE77,
    0x53F3A825C1162056, 0x711E094E30AE82A6, 0xCB5601DBB7E80993, 0xA4F0E3CCD699C0B6, 0x6648E500D940CF8B,
    0x9F87E67D668D5EEF, 0x21A1E0C2703C75A3, 0x0DFF882F28F21ED7, 0x8E4517D4D943BC09, 0x5009A27963909496,
    0x6BCAEFFF442E99C3, 0x729A54D920082FFD, 0x2C373B464AADBAEC, 0x15744B88ED99F9FA, 0x55B245955F3694BA,
    0x1A83EBA28F0907EB, 0xFBFA7A15AA2B2445, 0x2E79B8A2E29378DC, 0x28EB844F306826F9, 0xF71CC0A070241ADC,
    0xEB7385E4AAA55D03, 0x252EC83DB21D5045, 0x0F7CEA347A6F356E, 0x25CE2FD7AF05833D, 0x2C9FEE2DA183B761,
    0x651F1CA58E641326, 0xEA138AF27A32A8F8, 0x61E8164F0663F2CB, 0x2226077E16BCC4ED, 0x3DC7BB3F1E4B3274,
    0xBBD3EFC02F4929E5, 0xA6B88FF91D3E1211, 0x2BFD7558C87A2431, 0xEBFC0CB147F3726E, 0x778A545F7A10E095,
    0xF166188C3127B1E6, 0xDF207713E11AF5F9, 0x1A7912BCDE08BEAD, 0x1C813EE1617EBDF0, 0xCADADE89A1CED328,
    0xAA333C6FBD802869, 0x21DC2E3FD8674196, 0x57F382B24E8C2165, 0xA0395E7987351BAA, 0xC8405F3D70A8709D,
    0xB5C01632076FC3DE, 0x84940CB9D2D9CBA9, 0x62E7C47AEFA058E9, 0x02DBABE03632200A, 0x639EE7DA8112415A,
    0x57435AC784082F1E, 0x7B0A47ACB6E15641, 0xE7DF5CF9C65252D3, 0x3BEDBA2B86B381C9, 0xF014326DC487CF31,
    0xDD8A32940F2737BA, 0x4C891A875192E721, 0x4E007694A3889742, 0x18F906B88BA35597, 0xD97B8E787E776B83,
    0xE0C3CCAB762AE67E, 0x64EF4E6F83B2B833, 0x063FAB4CC7E8A7C8, 0x6A44F6ED7D6C7F45, 0xEAB51972B0508688,
    0x40A2944972A3C6F5, 0xBAC2DBFDF21DF9CD, 0xA6CE39DC20C85F2F, 0xA3F7B6F0F7AA189D, 0x8F5618C45463D4F8,
    0xEB5EDFE3A60C4E98, 0x5E15EE56035A3217, 0x373E99AF4A169B23, 0x3AFE4DF25AC9B0A9, 0x1BFAA356E4984BBE,
    0x6566F29216970A34, 0x8348026243E27D61, 0x9196448DB65300C9, 0x48C765FD64CA9AFD, 0xE694041A048D220E,
    0xD3D4BBA883AD513B, 0x63CEA3FF260E836C, 0xFF3CE32388537BC5, 0x6F45FCDB4B12FE0A, 0xB5E22D28579554C6,
    0x5FC7C297DB4F261A, 0xB2BB9243C35607FC, 0x5DB6C9EA4513830C, 0x84C3C407872B0AD8, 0xC24FC36E8A43B5D2,
    0x72FC95081972DA69, 0xE3B7C36F6AA82BB5, 0xCD43051F10A49145, 0x059A45B17EF743F8, 0x34576960C3FE0DC9,
    0x6F81461AE105784E, 0x50BDF99EB126007B, 0xA1AFAA830053A6F6, 0x36235CEBB456374F, 0x4CE2889F1EB4971F,
    0x22F4B5BFCD8807A0, 0xB8CDA33F023526C7, 0x012EDB7C0B81E0DD, 0x12B421A83FD13B0A, 0xB8460B3232D873F0,
    0x4B785238A42D6BD6, 0x3CC0681E6E65BB86, 0x72B441B5CA30F421, 0x65ED68A282BE03CE, 0x7128D5D584CA1985,
    0xD49088C8D78CD5E4, 0x97E62198A2E0F731, 0x0BBCF31151669BA4, 0xB62D14D4C619CFCC, 0x157D97A62408D020,
    0x5DEBAFF88503B3DB, 0xD2AA75B1139D7746, 0xC6B0D719DD379652, 0xCE0316232487D022, 0xC77F3F4DE6EEC247,
    0xBE59336DD98D54BC, 0xC78C5EAAAC6FEA8E, 0xF850A1C9FD1A1370, 0x2E2CE912B2485481, 0x1938056E99CD5A70,
    0x553476A4B28EDE18, 0x9F4ADB713AC4166D, 0xA30A1322B7C69DD1, 0x1AB521FA4F75DEDA, 0xBDB6552D08391785,
    0x288B3C3B236D06E9, 0x8C1280035292201B, 0xBA69BA9F3CD1528F, 0x867E9F77A9B37D9F, 0xB3DF1D3B0EDAE66F,
    0x0B607D4308680EA7, 0x222477A15304351A, 0x0DBB352DAD2F3669, 0x30309BF0638C45FE, 0x98FD55808155FCF5,
    0x255CFB71D74BB740, 0x78F3C86E9873AA3D, 0x0CADE3186CACB7F0, 0xC57BEE3899E523FB, 0xA0A048DB4E62E22A,
    0x177A18D1BD200CC9, 0x141BCC14B460E451, 0x221654C00E6234F6, 0x84762493B17DBCE7, 0x669B80BB582E85A7,
    0xE5E98310F5FC40ED, 0x396E4AA344FD676C, 0xBEA5F3C8C9E14F25, 0xF65A49BF9CAF8E19, 0xEA572BE3BE2E2C09,
    0x56EE366731355A77, 0xCE62EBA6299F25EE, 0xFEE4A3C22C63A4B4, 0x5B5F7E04E728AF69, 0xC730C0CA6D232930,
    0xDF322B51397F4F3C, 0x4E162C210550D96F, 0x6833616E41FDBB11, 0x9F2BAB555ECB93A6, 0x8BEC9000B07D3E02,
    0x900CC36C58681B87, 0xF4999ED0D11958FD, 0xFEA24ADB6B2935C1, 0x819A004F9272BB44, 0x0C17F54494491E1A,
    0x051C792025924599, 0x2158A37B147C3D80, 0x612AB42620BD9897, 0x93598A09358952C9, 0xEE40533C07B00BFA,
    0x11A7211F7457C2F4, 0x06B917179926B0D6, 0x32CF0729E9947D6A, 0x0B35B273805972D0, 0x0FDACE46BC48330E,
    0x444C5C844E219FB1, 0xE8527BC98E9A595A, 0x145533BB65425D47, 0x401CAEB818C36E35, 0x022F9565E5257D04,
    0x5377A6161AF5B56C, 0xCA1D4E5CC22E91F4, 0xC17537FF8451A5F1, 0x1B0FF1CB1D7CDB51, 0x7E0F668CA1F74933,
    0x010C895E55371FD8, 0x459B4D45C71CE99A, 0x76FC0CB7A0C06C76, 0x4271AF34EAF19FDC, 0x37071237B8A4D2BA,
    0x8F2E84D3FF202026, 0x1B858AA25725D05E, 0x6F05B65C83F7AC4C, 0xC1FB23733643DA98, 0x0F9463DF16F7A72D,
    0x34054AF61FA1DFA8, 0x4AA521246B527E77, 0x972152B7EE05B660, 0xED64AF1046E27DC1, 0x65543E1CC23BDF5D,
    0x45664E15EA49BFCD, 0x0CCB40B329069ACD, 0x78AB08EBBA9CEEC1, 0x6A59FF7B370A02F6, 0x356C1ECD59860F49,
    0xB010E0C65D2073FD, 0xEE8BE93D286F4B98, 0x7932DAC5B3F2B462, 0xFB98188C88F448B6, 0x30D00DEA86E30AE5,
    0x3574D8BD44C21B7A, 0xB971D65601CE347F, 0xC8C1479BAFD65D54, 0xD0244B2C0501580F, 0xFB5404A689C1B930,
    0x39B512F766593003, 0x6A4D3CB8740EB729, 0xF24B32B1D0794EE5, 0x9A8F376CDA102B7C, 0x3E350FE7143F79FC,
    0x4A3ADF02AA255A37, 0xC22B5BA268BC4B0E, 0x2D692461161ABD2A, 0x952DF59323D28D24, 0x2576EFE35F9C37A4,
    0xA17D7498F1B04CBE, 0xCBBB845628CCAC60, 0xB5D26155EF7480A2, 0x2814C6F0FAEDB3BC, 0xBF8E67F97F1C6579,
    0x30D71B7DB1A13AFF, 0xC343314F193234FF, 0x273EF80CE5AE89CC, 0xD3E0C8669FCC00A6, 0xDEDA879DB9F994BA,
    0xF0A62AC0C24741EA, 0x5A131A1CD60FB964, 0xF24A5BEF7B63F407, 0x8482704891A2096A, 0x8317C496BC5AD45E,
    0x5CB612CA2CB42B64, 0x6A1F51D199E04ADD, 0x7FDA7F01428898B3, 0xF8864A4CAEAA9A1A, 0xA8CE877EDDD326D6,
    0xD405FC65A68FD862, 0xBA249DC90AC140B8, 0x950C2167A48E73C6, 0xD289A1D51A07A669, 0x0C8197C7501256B2,
    0x0FC24142308C4F88, 0x732F534042191CE6, 0x8A97BB8B32945A81, 0xF5F05F489BB7D73A, 0x8E7216926AD73D44,
    0x8D036EBFB390EF1E, 0x5BEAAFD9B1F439ED, 0x8E19A92B0A65174C, 0xA875661E51EAF008, 0x694A5D33FA379F6D,
    0x7146EFD070473687, 0x768103BBA38BC8FA, 0x0D3709D8DE5F6E86, 0x058CCB7F2C0ADBB8, 0x81C74964B2C87B8B,
    0x9A17ADB39EA21E23, 0x8C72563F7208093A, 0x7092E92861DBAB94, 0xE72D0D5C043BDB39, 0x12191D21B12CA0A8,
    0x013D9FD62EEBF67D, 0xE2AAE30AEE5748AF, 0x7FDBD61FBED4464A, 0x2D6BDB53BA49C41C, 0x5BED39D3D0B03AEF,
    0xCA1AD2C6995F8071, 0x4ABFD53FC20DB1A7, 0x0C620F24A5F89706, 0xC03B601657C61A7A, 0x4B81C9A2D1F07EC6,
    0x5EA9E267BB0899DB, 0x6F96AA0914BA7B8C, 0x878C40267D2AE733, 0x05A45AF9ACC92725, 0xCD67303647E2F4F4,
    0x7FCA513E7407B90A, 0x7F84C46A38EE30A7, 0x017996148C30628A, 0x6575B399E2AA6948, 0xE42B1A1E94DBA120,
    0x642A629622C5B7A3, 0x5AB13D0863F98F47, 0x4B5C3A809014BD44, 0xD485C258FCB463D0, 0x1D4F9B5B43CF6A58,
    0xE120839F174177F7, 0x8A38E3E5E2D5D755, 0x988126931F8E6C11, 0x56884AF9540BF15C, 0x797456696DB3B176,
    0x5B7DD2CAD7624888, 0x08089FE031F588C9, 0xC6A61FDC4A6A2CAC, 0xFF7017B5B3B31256, 0x0AAA83467B6B5788,
    0x9EEA9F65D063A4E8, 0x69DAFA7C54C3A5E2, 0x275F23A3B5DEEEAD, 0x9D34816F701B7BE1, 0xDC2D757CAB7ACC97,
    0x365150589A298701, 0x398EB1EA1F0677FB, 0xCA568C27039A6897, 0xB8CB60570B188CFA, 0x85AAEC7E1EB1E27A,
    0xF36DB1D6B67AEF80, 0x78F4C9117BE45CC5, 0xF1303F1DCC423D97, 0xDD3BEE283257CD1B, 0xC4A6A7B0CCCEAA7B,
    0x68B3C1B142EBB887, 0xCA807F8DC3B3B5A6, 0x6289C8EAE48EC678, 0xD2F9B5266F335276, 0x0F92A7E8B6568E65,
    0x9441D125EE53B9A6, 0x0E874061B8C91FD2, 0x0DAD85ACB80A968C, 0x5A79436709F71C0D, 0x9A2A17DE73ED4611,
    0xB85F72CA521B835C, 0x1C50501430533A0B, 0x611DA0ACCF5A286D, 0x177DD73A72F7CD1B, 0x7F0891ACDEC818C4,
    0x335659EAB7F331A2, 0x9EEBC33C38437C40, 0x3D96AD4FFCC8C5FD, 0x7C0E73AA093B7590, 0x5C0BD162C4B0D5E1,
    0x1BD35CE991D493DD, 0xF8BE04B4F867A59C, 0x1384BBEEA1DBB980, 0x0DDACE695172A2A8, 0x3179C3A7F8B23868,
    0x5F27713F37F94AE6, 0x202C3F301C2A92E9, 0x2ABAE0A07DB3A472, 0xD594D50008FB3049, 0x36B0636B3904EADA,
    0x0A8EB6ABE7C77FE8, 0xBB05FDE0451AD57E, 0xFE78AAB3DEC271ED, 0x1B36198C7E414A16, 0x5B78A6D6AB72D227,
    0xC91B9240EE5F642A, 0x805A2F859FAC46D8, 0x68555488EA09C5E4, 0xDC1AD8F65D50B4B3, 0x85ADEB59ECA43A53,
    0xF05AD5536E58B35C, 0xD5C5E3D4C313A602, 0x587081AB2D39D277, 0xEFECFF141929D06E, 0x0519940CADF37459,
    0x4AABCEA0EBC2055A, 0x3CD789DFDA68186E, 0x75889DE89C75161E, 0x866CB45C977653C1, 0x38B12B36A5F97D75,
    0x5154A471CE9B5A20, 0x91DD10C8DAA9D79B, 0x5872C567B2CC0575, 0xD8ED1879894DA821, 0x3805C212F1BCB1F6,
    0xB905CF562B16800A, 0x6A98FB9A9E473E1D, 0xBDFB01B865241F2A, 0x3883ECEB2645B627, 0x332E6A9A5FD6B733,
    0x59025E53CDE1BD8F, 0x3CE831ED87AAEFFA, 0xBB0AA8C259814221, 0x038E764400726652, 0x007EB65B0405F760,
    0x9788A88FED0AAECA, 0x2697B853BA510E60, 0xA2DB13E00F401AB2, 0xDE6C5BE985939E46, 0x7AF7A55B8F458853,
    0x8E784A3ED5A0F743, 0x8965B3F4CAF76B84, 0xA2E0B11C813BDC3A, 0x29A5ADBFC8F87628, 0xF8E2E12E92D44D03,
};

/* Values below were generated from the original source.  Value is to identify if an expected change has been made to
 * the implementation.
 */
static constexpr unsigned XorShiRo256PlusNumberTestValues = 40;
static const std::uint64_t XorShiRo256PlusTestValues[XorShiRo256PlusNumberTestValues] = {
    0x3828113007A2F234, 0x698F006EE2D64938, 0x701969DBDF3AAF8A, 0x59A257D9ED4C85A0, 0xE6D9A0B97EB63768,
    0xF41412B5DE63C604, 0x504B993A1A65FB1A, 0x16A0944A5E028AD5, 0x89E4575736532273, 0xB37BE830CBF205E1,
    0x1BED79B99C7B6DAB, 0xE8D1165926B3D692, 0x90A2B3BABB776CCC, 0xADA7F961C5A68D62, 0x24FF3CF56320149C,
    0xB145D9A472835389, 0x75C3D7F38A18120F, 0x4811EF15760E16B1, 0xE99408DE4D3B5023, 0xD4CC0FA4594383EE,
    0xC3B142B95005E9CE, 0xF7E775BF516FED77, 0xD7867DD82A322FDF, 0xBFC002B6073E81D9, 0x166D6361F4130984,
    0x5F55F74B654E24B1, 0x3902B8FD2ECE3DC4, 0x28BECFDD7416A59E, 0x117855BA1A0BAF5C, 0x6E4BAEA54D3DAC2C,
    0x1009E3F137940C69, 0x595832CB18EEAA40, 0xFCC51363A6DD8C77, 0xB4147269A3D3A584, 0x1A2103C14E148F90,
    0x0B6D5EE0F4F0098B, 0x9803F6E4B632BD25, 0xD05844904F4D920B, 0x2EBF2A1172240A82, 0x876D0D5FD5A8E9B6
};

/* Values below were generated from the original source.  Value is to identify if an expected change has been made to
 * the implementation.
 */
static constexpr unsigned XorShiRo256StarsNumberTestValues = 40;
static const std::uint64_t XorShiRo256StarsTestValues[XorShiRo256PlusNumberTestValues] = {
    0x42EAE411145DBA27, 0xEAF24BA55D6680AF, 0xB7884EB4982DE199, 0x2A55B1E52DC3C88C, 0x18C842B7840E34BE,
    0x9AD4F9D430F69969, 0xFB0AD6E63C596224, 0xF6D84B7C1F79BA5A, 0x2BA87C9719C74C06, 0x860F1B43B93EADC5,
    0x307E412A455F69ED, 0xFD98B2E1E562996B, 0x614D3C61C924C91E, 0x55775C2CA1509632, 0xD896951B5023F337,
    0x997BC63B20067384, 0x68DADB442B37BCC6, 0x09F7E63565DDE4A6, 0xF07B555E3A125207, 0x4A4296C4DA88258E,
    0x2114102222340EFB, 0x7CD8E9EF47E19C4D, 0x070395EF4D101520, 0xDA92E3C99844BD89, 0x8BC5FCC411F51D94,
    0xD8BCD0DBE08F38FE, 0x69333A28FB2072AC, 0x8FE15126D12645CD, 0x33ABFB94FE1E5614, 0xE2F7AF1325FFA540,
    0x183224A884F96D53, 0x792C53B7825DC95F, 0x02DA16D57E2EFA81, 0x5D1184E92E42760F, 0x66AAEFAEFA7091C1,
    0xA629563EB408F13B, 0x3A8199009A9B0226, 0x48FF29943282BAC5, 0x275F14F1CE586255, 0x05D03C0320A9DEBC
};


struct PeriodicAutocorrelationLimits {
    double average;
    double maximum;
};

static constexpr unsigned numberGenerators = static_cast<unsigned>(M::PerThread::RngType::NUMBER_RNGS);
static const PeriodicAutocorrelationLimits autocorrelationThreshold[numberGenerators] = {
    { 4.0E-7, 0.06 }, // MT19937
    { 2.0E-8, 0.06 }, // MT216091
    { 5.0E-8, 0.06 }, // XORSHIRO256+
    { 1.0E-6, 0.06 }, // XORSHIRO256**
    { 1.0E-5, 0.06 }  // TRNG
};


QVector<double> TestPerThread::histogram(
        const QVector<double>& values,
        double                 firstBucket,
        double                 lastBucket,
        unsigned               numberBuckets
    ) {
    QVector<double> result(numberBuckets);

    double   bucketWidth  = (lastBucket - firstBucket) / static_cast<double>(numberBuckets);
    unsigned numberValues = static_cast<unsigned>(values.size());

    for (unsigned i=0 ; i<numberValues ; ++i) {
        double   v      = values.at(i);
        if (v < firstBucket) {
            ++result[0];
        } else if (v >= lastBucket) {
            ++result[numberBuckets - 1];
        } else {
            unsigned bucket = static_cast<unsigned>((v - firstBucket) / bucketWidth);
            ++result[bucket];
        }
    }

    for (unsigned i=0 ; i<numberBuckets ; ++i) {
        result[i] /= 1.0 * numberValues;
    }

    return result;
}


QVector<double> TestPerThread::periodicAutocorrelation(const QVector<double>& input) {
    unsigned        length = input.length();
    QVector<double> result(length, 0.0);

    for (unsigned long i=0 ; i<length ; ++i) {
        double x = 0;

        for (unsigned long j=0 ; j<length ; ++j) {
            unsigned long k = (j-i) % length;
            x += input[j]*input[k];
        }

        result[i] = x / length;
    }

    return result;
}


double TestPerThread::averageCorrelation(const QVector<double>& input) {
    unsigned long inputLength    = static_cast<unsigned>(input.size());
    long double   sumCorrelation = 0;

    for (unsigned long i=1 ; i<inputLength ; ++i) {
        sumCorrelation += input.at(i);
    }

    return sumCorrelation / static_cast<double>(inputLength);
}


double TestPerThread::maximumCorrelation(const QVector<double>& input) {
    unsigned long inputLength = static_cast<unsigned>(input.size());
    long double   maximum     = 0;

    for (unsigned long i=1 ; i<inputLength ; ++i) {
        double v = std::abs(input.at(i));
        if (v > maximum) {
            maximum = v;
        }
    }

    return maximum;
}


TestPerThread::TestPerThread() {}


TestPerThread::~TestPerThread() {}


void TestPerThread::testMT19937() {
    M::PerThread::RngSeed rngSeed = { 1, 2, 3, 4 };

    M::PerThread pt(5, M::PerThread::RngType::MT19937, rngSeed, nullptr);
    for (unsigned i=0 ; i<MT19937NumberTestValues ; ++i) {
        unsigned long long measured = pt.random64();
        std::uint64_t      expected = MT19937TestValues[i];
        QCOMPARE(measured, expected);
    }
}


void TestPerThread::testMT216091() {
    M::PerThread::RngSeed rngSeed = { 1, 2, 3, 4 };

    M::PerThread pt(5, M::PerThread::RngType::MT216091, rngSeed, nullptr);
    for (unsigned i=0 ; i<MT216091NumberTestValues ; ++i) {
        unsigned long long measured = pt.random64();
        std::uint64_t      expected = MT216091TestValues[i];

        QCOMPARE(measured, expected);
    }
}


void TestPerThread::testXorShiRo256Plus() {
    M::PerThread::RngSeed rngSeed = { 1, 2, 3, 4 };

    M::PerThread pt(5, M::PerThread::RngType::XORSHIRO256_PLUS, rngSeed, nullptr);
    for (unsigned i=0 ; i<XorShiRo256PlusNumberTestValues ; ++i) {
        unsigned long long measured = pt.random64();
        unsigned long long expected = XorShiRo256PlusTestValues[i];

        QCOMPARE(measured, expected);
    }
}


void TestPerThread::testXorShiRo256Stars() {
    M::PerThread::RngSeed rngSeed = { 1, 2, 3, 4 };

    M::PerThread pt(5, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, nullptr);
    for (unsigned i=0 ; i<XorShiRo256StarsNumberTestValues ; ++i) {
        unsigned long long measured = pt.random64();
        unsigned long long expected = XorShiRo256StarsTestValues[i];

        QCOMPARE(measured, expected);
    }
}


void TestPerThread::testTRNG() {
    // We rely on the auto-correlation test for the true RNG.
}


void TestPerThread::testMT19937Array() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    std::uint64_t integerValues[numberIterations + 1]; // +1 to guarantee 128-bit alignment
    M::PerThread pt(1, M::PerThread::RngType::MT19937, rngSeed, Q_NULLPTR);

    pt.fillArray(integerValues, numberIterations);

    QVector<double> uniformValues(numberIterations);
    for (unsigned i=0 ; i<numberIterations ; ++i) {
        uniformValues[i] = (
                static_cast<long double>(integerValues[i])
              / static_cast<long double>(static_cast<std::uint64_t>(-1))
            - 0.5
        );
    }

    QVector<double> pac = periodicAutocorrelation(uniformValues);
    double          avg = averageCorrelation(pac);
    double          max = maximumCorrelation(pac);

    qDebug() << "average correlation: " << avg << " maximum correlation: " << max;

    QCOMPARE(avg < 4.0E-7, true);
    QCOMPARE(max < 0.08, true);
}


void TestPerThread::testMT216091Array() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };
    M::PerThread pt(1, M::PerThread::RngType::MT216091, rngSeed, Q_NULLPTR);

    std::uint64_t* integerValues = new std::uint64_t[numberIterations + 1]; // +1 to guarantee 128-bit alignment
    pt.fillArray(integerValues, numberIterations);

    QVector<double> uniformValues(numberIterations);
    for (unsigned i=0 ; i<numberIterations ; ++i) {
        uniformValues[i] = (
                static_cast<long double>(integerValues[i])
              / static_cast<long double>(static_cast<std::uint64_t>(-1))
            - 0.5
        );
    }

    delete[] integerValues;

    QVector<double> pac = periodicAutocorrelation(uniformValues);
    double          avg = averageCorrelation(pac);
    double          max = maximumCorrelation(pac);

    qDebug() << "average correlation: " << avg << " maximum correlation: " << max;

    QCOMPARE(avg < 0.04, true);
    QCOMPARE(max < 0.08, true);
}


void TestPerThread::testXorShiRo256PlusArray() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_PLUS, rngSeed, Q_NULLPTR);

    std::uint64_t integerValues[numberIterations + 1]; // +1 to guarantee 128-bit alignment
    pt.fillArray(integerValues, numberIterations);

    QVector<double> uniformValues(numberIterations);
    for (unsigned i=0 ; i<numberIterations ; ++i) {
        uniformValues[i] = (
                static_cast<long double>(integerValues[i])
              / static_cast<long double>(static_cast<std::uint64_t>(-1))
            - 0.5
        );
    }

    QVector<double> pac = periodicAutocorrelation(uniformValues);
    double          avg = averageCorrelation(pac);
    double          max = maximumCorrelation(pac);

    qDebug() << "average correlation: " << avg << " maximum correlation: " << max;

    QCOMPARE(avg < 1.0E-7, true);
    QCOMPARE(max < 0.08, true);
}


void TestPerThread::testXorShiRo256StarsArray() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    std::uint64_t integerValues[numberIterations + 1]; // +1 to guarantee 128-bit alignment
    pt.fillArray(integerValues, numberIterations);

    QVector<double> uniformValues(numberIterations);
    for (unsigned i=0 ; i<numberIterations ; ++i) {
        uniformValues[i] = (
                static_cast<long double>(integerValues[i])
              / static_cast<long double>(static_cast<std::uint64_t>(-1))
            - 0.5
        );
    }

    QVector<double> pac = periodicAutocorrelation(uniformValues);
    double          avg = averageCorrelation(pac);
    double          max = maximumCorrelation(pac);

    qDebug() << "average correlation: " << avg << " maximum correlation: " << max;

    QCOMPARE(avg < 8.0E-7, true);
    QCOMPARE(max < 0.06, true);
}


void TestPerThread::testTRNGArray() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::TRNG, rngSeed, Q_NULLPTR);

    std::uint64_t integerValues[numberIterations + 1]; // +1 to guarantee 128-bit alignment
    pt.fillArray(integerValues, numberIterations);

    QVector<double> uniformValues(numberIterations);
    for (unsigned i=0 ; i<numberIterations ; ++i) {
        uniformValues[i] = (
                static_cast<long double>(integerValues[i])
              / static_cast<long double>(static_cast<std::uint64_t>(-1))
            - 0.5
        );
    }

    QVector<double> pac = periodicAutocorrelation(uniformValues);
    double          avg = averageCorrelation(pac);
    double          max = maximumCorrelation(pac);

    qDebug() << "average correlation: " << avg << " maximum correlation: " << max;

    QCOMPARE(avg < 0.05, true);
    QCOMPARE(max < 0.15, true);
}


void TestPerThread::testSpeed() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    for (unsigned r=0 ; r<static_cast<unsigned>(M::PerThread::RngType::NUMBER_RNGS) ; ++r) {
        M::PerThread::RngType rngType = static_cast<M::PerThread::RngType>(r);
        M::PerThread pt(1, rngType, rngSeed, Q_NULLPTR);

        std::uint64_t startTime = QDateTime::currentMSecsSinceEpoch();
        for (unsigned i=0 ; i<numberSpeedIterations ; ++i) {
            (void) pt.random64();
        }
        std::uint64_t endTime = QDateTime::currentMSecsSinceEpoch();

        double          averageTime = (1000000.0 * (endTime - startTime)) / (1.0 * numberSpeedIterations);
        qDebug() << "RNG: " << r << " time: " << averageTime << " nSec";
    }
}


void TestPerThread::testAutoCorrelation() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    QVector<std::uint64_t> integerValues(numberIterations);
    QVector<double>        doubleValues(numberIterations);

    for (unsigned r=0 ; r<static_cast<unsigned>(M::PerThread::RngType::NUMBER_RNGS) ; ++r) {
        M::PerThread::RngType rngType = static_cast<M::PerThread::RngType>(r);
        M::PerThread pt(1, rngType, rngSeed, Q_NULLPTR);

        for (unsigned i=0 ; i<numberIterations ; ++i) {
            integerValues[i] = pt.random64();
        }

        for (unsigned i=0 ; i<numberIterations ; ++i) {
            doubleValues[i] = (
                    static_cast<long double>(integerValues.at(i))
                  / static_cast<long double>(static_cast<std::uint64_t>(-1))
                - 0.5
            );
        }

        QVector<double> pac = periodicAutocorrelation(doubleValues);
        double          avg = averageCorrelation(pac);
        double          max = maximumCorrelation(pac);

        qDebug() << "RNG: " << r << " avg: " << avg << " max: " << max;

        const PeriodicAutocorrelationLimits* limits = autocorrelationThreshold + r;
        QCOMPARE(avg < limits->average, true);
        QCOMPARE(avg < limits->maximum, true);
    }
}




void TestPerThread::testInclusive() {
    // Code below is essentially the Anderson-Darling test.

    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread     pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);
    QVector<double> values;

    for (unsigned i=0 ; i<numberIterations ; ++i) {
        values.push_back(pt.randomInclusive());
    }

    unsigned numberBuckets = numberIterations / 1000;
    double   p             = 1.0 / numberBuckets;
    QVector<double> h = histogram(values,0, 1.0, numberBuckets);

    double sum        = 0;
    double sumSquared = 0;

    for (unsigned i=0 ; i<numberBuckets ; ++i) {
        double e = h.at(i) - p;
        sum        += e;
        sumSquared += e * e;
    }

    double avg    = sum / static_cast<double>(numberBuckets);
    double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

    QCOMPARE(avg < 1.0E-15, true);
    QCOMPARE(stddev < 5.0E-4, true);
}


void TestPerThread::testExclusive() {
    // Code below is essentially the Anderson-Darling test.

    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread     pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);
    QVector<double> values;

    for (unsigned i=0 ; i<numberIterations ; ++i) {
        values.push_back(pt.randomExclusive());
    }

    unsigned numberBuckets = numberIterations / 1000;
    double   p             = 1.0 / numberBuckets;
    QVector<double> h = histogram(values,0, 1.0, numberBuckets);

    double sum        = 0;
    double sumSquared = 0;

    for (unsigned i=0 ; i<numberBuckets ; ++i) {
        double e = h.at(i) - p;
        sum        += e;
        sumSquared += e * e;
    }

    double avg    = sum / static_cast<double>(numberBuckets);
    double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

    QCOMPARE(avg < 1.0E-15, true);
    QCOMPARE(stddev < 5.0E-4, true);
}


void TestPerThread::testNormal() {
    // Code below is essentially the Anderson-Darling test.

    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread     pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);
    QVector<double> values;

    for (unsigned i=0 ; i<numberIterations ; ++i) {
        values.push_back(pt.randomNormal()); // mean = 0, sigma = 1
    }

    unsigned numberBuckets = numberIterations / 1000;
    QVector<double> h = histogram(values,-6.0, +6.0, numberBuckets);

    double sum        = 0;
    double sumSquared = 0;

    double          w = 12.0 / static_cast<double>(numberBuckets);
    for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
        double x = 12.0 * static_cast<double>(i)/static_cast<double>(numberBuckets) - 6.0;
        double p = w * (1.0/std::sqrt(2.0 * M::pi)) * std::exp(-0.5 * x * x);
        double e = h.at(i) - p;

        sum        += e;
        sumSquared += e * e;
    }

    double avg    = sum / static_cast<double>(numberBuckets);
    double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

    QCOMPARE(avg < 1.0E-10, true);
    QCOMPARE(stddev < 1.0E-3, true);
}


void TestPerThread::testWeibull() {
    // Code below is essentially the Anderson-Darling test.

    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    // We test the Weibull algorithm for different shape, scale, and delay terms.
    for (unsigned k=0 ; k<10 ; ++k) {
        double shape = 3.9 * pt.randomInclusive() + 0.1;
        double scale = 2.0 * pt.randomInclusive() + 1.0;
        double delay = pt.randomInclusive();

        QVector<double> values;

        for (unsigned i=0 ; i<100*numberIterations ; ++i) {
            values.push_back(pt.randomWeibull(scale, shape, delay));
        }

        unsigned numberBuckets  = numberIterations / 1000;
        double   histogramWidth = 6.0 * scale + delay;
        QVector<double> h = histogram(values, 0, histogramWidth, numberBuckets);

        // For the Weibull, we generate our PDF as a distinct operation.  Because our tails may be long, and the
        // histogram represents a discrete set of points, the PDF will appear slightly off relative to the histogram.
        // We address this by calculating the approximate error and then scaling our PDF later when we compare.

        QVector<double> pdf;
        double          sumPDF      = 0;
        double          bucketWidth = histogramWidth / static_cast<double>(numberBuckets);
        for (unsigned i=0 ; i<(numberBuckets - 1) ; ++i) {
            double x  = histogramWidth * static_cast<double>(i)/static_cast<double>(numberBuckets);
            double xp = x / scale;
            double p  = x < delay ? 0 : (shape / scale) * std::pow(xp, shape - 1) * std::exp(-std::pow(xp, shape));
            double pw = p * bucketWidth;

            pdf.append(pw);
            sumPDF += pw;
        }

        double sum        = 0;
        double sumSquared = 0;
        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            double e = h.at(i) - pdf.at(i) / sumPDF;
            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }

        QCOMPARE(std::abs(avg) < 5.0E-3, true);
        QCOMPARE(stddev < 2.0E-2, true);
    }

    qDebug() << "Maximum average error: " << maximumAverageError
             << "Maximum stddev error: " << maximumStdDevError;
}


void TestPerThread::testExponential() {
    // For the exponential distribution, we rely on the fact that the slope of natural log of the histogram should
    // be a straight line, ideally matching:
    //
    //     ln(pdf(x)) = ln(r) - r x
    //
    // Where r is the rate term.
    //
    // Assuming a straight line fit, we calculate an R^2 factor for fit and use that as the pass criteria.

    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    // We test the Exponential distribution over several rates.
    for (unsigned k=0 ; k<10 ; ++k) {
        double rate = 9.9 * pt.randomInclusive() + 0.1;

        QVector<double> values;
        for (unsigned i=0 ; i<100.0 * numberIterations ; ++i) {
            values.push_back(pt.randomExponential(rate));
        }

        unsigned numberBuckets  = numberIterations / 1000;
        double   histogramWidth = 10.0 / rate;
        QVector<double> h = histogram(values, 0, histogramWidth, numberBuckets);

        double sum         = 0;
        double sumSquared  = 0;
        double bucketWidth = histogramWidth / static_cast<double>(numberBuckets);
        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            double x   = histogramWidth * static_cast<double>(i)/static_cast<double>(numberBuckets);
            double lnp = std::log(rate) - rate * x + std::log(bucketWidth);
            double lnh = std::log(h.at(i));

            double e   = lnp - lnh;

            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }

        QCOMPARE(std::abs(avg) < 0.06, true);
        QCOMPARE(stddev < 0.1, true);
    }

    qDebug() << "Maximum average error: " << maximumAverageError
             << "Maximum stddev error: " << maximumStdDevError;
}


void TestPerThread::testGamma() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    // We test the Gamma distribution over several shape and scale terms.
    for (unsigned k=0 ; k<10 ; ++k) {
        double shape = 4.0 * pt.randomInclusive() + 0.01;
        double scale = 1.75 * pt.randomInclusive() + 0.25;

        QVector<double> values;
        for (unsigned i=0 ; i<100.0 * numberIterations ; ++i) {
            values.push_back(pt.randomGamma(shape, scale));
        }

        unsigned numberBuckets  = numberIterations / 1000;
        double   histogramWidth = scale * 20.0;
        QVector<double> h = histogram(values, 0, histogramWidth, numberBuckets);

        double sum         = 0;
        double sumSquared  = 0;
        double bucketWidth = histogramWidth / static_cast<double>(numberBuckets);
        double scaleTerm   = 1.0 / (M::gamma(shape) * std::pow(scale, shape));

        QVector<double> pdf;
        for (unsigned i=0 ; i<(numberBuckets - 1) ; ++i) {
            double x  = histogramWidth * static_cast<double>(i)/static_cast<double>(numberBuckets);
            double p  = bucketWidth * scaleTerm * std::pow(x, shape - 1) * std::exp(-x / scale);
            pdf.push_back(p);
        }

        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            double e  = (pdf.at(i) - h.at(i)) / pdf.at(i);

            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }

        QCOMPARE(std::abs(avg) < 0.95, true);
        QCOMPARE(stddev < 1.0, true);
    }

    qDebug() << "Maximum average relative error: " << maximumAverageError
             << "Maximum stddev relative error: " << maximumStdDevError;
}


void TestPerThread::testRayleigh() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    // We test the Rayleigh distribution over several scale terms.
    for (unsigned k=0 ; k<10 ; ++k) {
        double scale = 1.5 * pt.randomInclusive() + 0.5;

        QVector<double> values;
        for (unsigned i=0 ; i<100.0 * numberIterations ; ++i) {
            values.push_back(pt.randomRayleigh(scale));
        }

        unsigned numberBuckets  = numberIterations / 1000;
        double   histogramWidth = scale * 6.0;
        QVector<double> h = histogram(values, 0, histogramWidth, numberBuckets);

        double sum         = 0;
        double sumSquared  = 0;
        double bucketWidth = histogramWidth / static_cast<double>(numberBuckets);

        QVector<double> pdf;
        for (unsigned i=0 ; i<(numberBuckets - 1) ; ++i) {
            double x = histogramWidth * static_cast<double>(i)/static_cast<double>(numberBuckets);
            double p = bucketWidth * (x / (scale * scale)) * std::exp(-x * x / (2.0 * scale * scale));
            pdf.push_back(p);
        }

        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            double e  = (pdf.at(i) - h.at(i)) / pdf.at(i);

            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }

        QCOMPARE(std::abs(avg) < 0.2, true);
        QCOMPARE(stddev < 0.7, true);
    }

    qDebug() << "Maximum average relative error: " << maximumAverageError
             << "Maximum stddev relative error: " << maximumStdDevError;
}


void TestPerThread::testChiSquared() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    // We test the Chi-Squared over several degrees of freedom.
    for (unsigned k=0 ; k<10 ; ++k) {
        M::Integer dof = 1.0 + (std::abs(pt.randomInteger()) % 10); // degrees of freedom

        QVector<double> values;
        for (unsigned i=0 ; i<100.0 * numberIterations ; ++i) {
            values.push_back(pt.randomChiSquared(dof));
        }

        unsigned numberBuckets  = numberIterations / 1000;
        double   histogramWidth = std::sqrt(dof) * 8.0;
        QVector<double> h = histogram(values, 0, histogramWidth, numberBuckets);

        double sum         = 0;
        double sumSquared  = 0;
        double bucketWidth = histogramWidth / static_cast<double>(numberBuckets);
        double sf          = 1.0 / (std::pow(2.0, dof / 2) * M::gamma(dof / 2.0));

        QVector<double> pdf;
        for (unsigned i=0 ; i<(numberBuckets - 1) ; ++i) {
            double x = histogramWidth * static_cast<double>(i)/static_cast<double>(numberBuckets);
            double p = bucketWidth * sf * std::pow(x, (dof / 2.0) - 1.0) * std::exp(-x / 2.0);
            pdf.push_back(p);
        }

        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            double e  = (pdf.at(i) - h.at(i)) / pdf.at(i);

            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }

        QCOMPARE(std::abs(avg) < 0.5, true);
        QCOMPARE(stddev < 0.4, true);
    }

    qDebug() << "Maximum average relative error: " << maximumAverageError
             << "Maximum stddev relative error: " << maximumStdDevError;
}


void TestPerThread::testPoisson() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    M::Real  rates[] = { 10.0, 20.0, 50.0, 100.0, 200.0, 0 };
    M::Real* rate = rates;
    while (*rate != 0) {
        M::Real r = *rate;

        QVector<double> values;
        for (unsigned i=0 ; i<100*numberIterations ; ++i) {
            values.push_back(pt.randomPoisson(r));
        }

        unsigned numberBuckets  = 5 * r;
        QVector<double> h(numberBuckets);
        for (unsigned i=0 ; i<100*numberIterations ; ++i) {
            unsigned v = static_cast<unsigned>(values.at(i));
            if (v >= numberBuckets) {
                ++h.last();
            } else {
                ++h[v];
            }
        }

        for (unsigned i=0 ; i<numberBuckets ; ++i) {
            h[i] /= static_cast<double>(100 * numberIterations);
        }

        double sum         = 0;
        double sumSquared  = 0;

        QVector<double> pdf;
        for (M::Integer i=0 ; i<numberBuckets ; ++i) {
            double p = std::exp(i * M::ln(r).real() - r - M::lnFactorial(i));
            pdf.append(p);
        }

        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            double e  = h.at(i) != 0 ? (pdf.at(i) - h.at(i)) / pdf.at(i) : 0;

            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }

        QCOMPARE(std::abs(avg) < 0.2, true);
        QCOMPARE(stddev < 0.32, true);

        ++rate;
    }

    qDebug() << "Maximum average relative error: " << maximumAverageError
             << "Maximum stddev relative error: " << maximumStdDevError;
}


void TestPerThread::testBinomial() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    M::Integer  numberTrialsList[] = { 5, 10, 15, 20, 50, 100, 200, 0 };
    M::Integer* numberTrials       = numberTrialsList;
    while (*numberTrials != 0) {
        M::Integer n = *numberTrials;
        M::Real    p = pt.randomInclusive();

        QVector<M::Integer> values;
        for (unsigned i=0 ; i<100*numberIterations ; ++i) {
            M::Integer k = pt.randomBinomial(n, p);

            QCOMPARE(k >= 0, true);
            QCOMPARE(k <= n, true);

            values.push_back(k);
        }

        unsigned numberBuckets = static_cast<unsigned>(n + 1);
        QVector<double> h(numberBuckets);
        for (unsigned i=0 ; i<100*numberIterations ; ++i) {
            unsigned v = static_cast<unsigned>(values.at(i));
            ++h[v];
        }

        for (unsigned i=0 ; i<numberBuckets ; ++i) {
            h[i] /= static_cast<double>(100 * numberIterations);
        }

        double sum         = 0;
        double sumSquared  = 0;

        QVector<M::Real> pmf;
        for (M::Integer k=0 ; k<numberBuckets ; ++k) {
            M::Real r = M::binomial(n, k) * std::pow(p, k) * std::pow(1.0 - p, n - k);
            pmf.append(r);
        }

        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            double e  = h.at(i) != 0 ? static_cast<M::Real>(pmf.at(i) - h.at(i)) / static_cast<M::Real>(pmf.at(i)) : 0;

            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        qDebug() << "n: " << n << " avg = " << avg << ", stddev = " << stddev;

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }

        // I've found that we mostly get much better numbers than below.  However, we get one set with poor number
        // Changing parameters does not change the fact that one set is bad, only which set is bad.  Based on this,
        // and a bit of additional experimentation, I believe we're seeing an outlyer problem due to statistical
        // variation.  Increasing the sample sizes would likely help this but would further slow down the tests.
        //
        // I've included values to validate the range of the returned values and have manually looked at the resulting
        // distributions to make certain the shapes are reasonable.

        QCOMPARE(std::abs(avg) < 2.5, true);
        QCOMPARE(stddev < 5, true);

        ++numberTrials;
    }

    qDebug() << "Maximum average relative error: " << maximumAverageError
             << "Maximum stddev relative error: " << maximumStdDevError;
}


void TestPerThread::testLogNormal() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    QVector<M::Real> values;
    for (unsigned i=0 ; i<100*numberIterations ; ++i) {
        M::Real v = pt.randomLogNormal();
        values.push_back(v);
    }

    unsigned numberBuckets = static_cast<unsigned>(numberIterations / 1000);
    M::Real  bucketWidth   = (std::exp(1.0) - std::exp(-4.0)) / numberBuckets;
    QVector<double> h = histogram(values, std::exp(-4.0), std::exp(1.0), numberBuckets);

    QVector<double> pdf;
    for (M::Real x=std::exp(-4.0) ; x<std::exp(1.0) ; x += bucketWidth) {
        M::Real p = bucketWidth * (1.0 / (x * std::sqrt(2.0 * M::pi))) * std::exp(-(std::log(x) * std::log(x) / 2));
        pdf.append(p);
    }

    double sum         = 0;
    double sumSquared  = 0;

    for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
        M::Real e = pdf.at(i) != 0 ? (pdf.at(i) - h.at(i)) / pdf.at(i) : 0.0;

        sum        += e;
        sumSquared += e * e;
    }

    double avg    = sum / static_cast<double>(numberBuckets);
    double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

    QCOMPARE(std::abs(avg) < 0.006, true);
    QCOMPARE(stddev < 0.08, true);
}


void TestPerThread::testGeometric() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    for (M::Real p=0.1 ; p<1.0 ; p += 0.2) {
        QVector<M::Integer> values;
        for (unsigned i=0 ; i<100*numberIterations ; ++i) {
            M::Integer k = pt.randomGeometric(p);
            values.push_back(k);
        }

        unsigned numberBuckets = static_cast<unsigned>(1.5 + (3.0 / p));
        QVector<double> h(numberBuckets);
        for (unsigned i=0 ; i<100*numberIterations ; ++i) {
            unsigned v = static_cast<unsigned>(values.at(i));
            if (v >= numberBuckets) {
                ++h.last();
            } else {
                ++h[v];
            }
        }

        for (unsigned i=0 ; i<numberBuckets ; ++i) {
            h[i] /= static_cast<double>(100 * numberIterations);
        }

        double sum         = 0;
        double sumSquared  = 0;

        QVector<M::Real> pmf;
        pmf.append(0);
        for (M::Integer k=1 ; k<numberBuckets ; ++k) {
            M::Real r = std::pow(1.0 - p, k - 1.0) * p;
            pmf.append(r);
        }

        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            double e  = h.at(i) != 0 ? static_cast<M::Real>(pmf.at(i) - h.at(i)) / static_cast<M::Real>(pmf.at(i)) : 0;

            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        QCOMPARE(avg < 0.001, true);
        QCOMPARE(stddev < 0.003, true);

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }
    }

    qDebug() << "Maximum average relative error: " << maximumAverageError
             << "Maximum stddev relative error: " << maximumStdDevError;
}


void TestPerThread::testCauchyLorentz() {
    M::PerThread::RngSeed rngSeed = {
        0x123456789ABCDEF0ULL,
        0x132457689BACDFE0ULL,
        0x10FEDCBA98765432ULL,
        0x76543210FEDCBA98ULL
    };

    double maximumAverageError = 0;
    double maximumStdDevError  = 0;

    M::PerThread pt(1, M::PerThread::RngType::XORSHIRO256_STARS, rngSeed, Q_NULLPTR);

    for (unsigned trial=0 ; trial<10 ; ++trial) {
        M::Real location = 1 + pt.randomInclusive() * 2;
        M::Real scale    = 0.2 + 1.8 * pt.randomInclusive();

        QVector<M::Real> values;
        for (unsigned i=0 ; i<100*numberIterations ; ++i) {
            M::Real v = pt.randomCauchyLorentz(location, scale);
            values.push_back(v);
        }

        M::Real minimumValue = location - 6.0 * scale;
        M::Real maximumValue = location + 6.0 * scale;

        unsigned numberBuckets = static_cast<unsigned>(numberIterations / 1000);
        M::Real  bucketWidth   = (maximumValue - minimumValue) / numberBuckets;
        QVector<double> h = histogram(values, minimumValue, maximumValue, numberBuckets);

        QVector<double> pdf;
        for (M::Real x=minimumValue ; x<=maximumValue ; x += bucketWidth) {
            M::Real t = (x - location) / scale;
            M::Real p = bucketWidth * (1.0 / (M::pi * scale * (1.0 + t * t)));
            pdf.append(p);
        }

        double sum         = 0;
        double sumSquared  = 0;

        for (unsigned i=1 ; i<(numberBuckets - 1) ; ++i) {
            M::Real e = pdf.at(i) != 0 ? (pdf.at(i) - h.at(i)) / pdf.at(i) : 0.0;

            sum        += e;
            sumSquared += e * e;
        }

        double avg    = sum / static_cast<double>(numberBuckets);
        double stddev = std::sqrt(sumSquared / static_cast<double>(numberBuckets));

        if (std::abs(avg) > maximumAverageError) {
            maximumAverageError = std::abs(avg);
        }

        if (stddev > maximumStdDevError) {
            maximumStdDevError = stddev;
        }

        QCOMPARE(std::abs(avg) < 0.002, true);
        QCOMPARE(stddev < 0.04, true);
    }

    qDebug() << "Maximum average relative error: " << maximumAverageError
             << "Maximum stddev relative error: " << maximumStdDevError;
}


void TestPerThread::testThreadId() {
    M::PerThread::RngSeed rngSeed = { 1, 2, 3, 4 };

    M::PerThread pt1(1, M::PerThread::RngType::MT19937, rngSeed, Q_NULLPTR);
    QCOMPARE(pt1.threadId(), 1U);

    M::PerThread pt2(2, M::PerThread::RngType::MT19937, rngSeed, Q_NULLPTR);
    QCOMPARE(pt2.threadId(), 2U);
}


void TestPerThread::testOperationHandle() {
    M::PerThread::RngSeed rngSeed = { 1, 2, 3, 4 };
    M::PerThread pt(1, M::PerThread::RngType::MT19937, rngSeed, Q_NULLPTR);

    pt.setOperationHandle(1);
    QCOMPARE(pt.operationHandle(), 1U);

    pt.setOperationHandle(2);
    QCOMPARE(pt.operationHandle(), 2U);
}
